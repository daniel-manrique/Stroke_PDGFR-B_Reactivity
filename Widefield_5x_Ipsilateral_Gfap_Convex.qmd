---
title-block-banner: true
title: "Analysis of GFAP coverage (convex hull) of the ischemic hemisphere"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    degrees:
      - PhD
    affiliation: 
      - name: Univerisity Laval 
        department: Psychiatry and Neuroscience
        group: Laboratory of neurovascular interactions 
note: "GitHub: https://daniel-manrique.github.io/"

keywords: 
  - GFAP analysis
  - Scar formation
  - Brain injury
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false

csl: science.csl
bibliography: references.bib
---

# Preview

Our observations of glial reactivity suggest that the barrier of GFAP-positive astrocytes is located at the boundary of the healthy tissue. Moreover, our previous modeling predicted a positive correlation between astrocyte reactivity and hemispheric area. These aspects led us to explore whether the astrocyte boundary (the GFAP convex hull) increases during the injury course.

**Parent dataset:** PDGFR-Î² and GFAP-stained whole brain slices imaged at 5x (with stitching). Samples are grouped at 0 (Sham), 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_5x_Whole_Gfap-Pdgfrb.zip`.

**Working dataset**: The `Data_Processed/Widefield_5x_Whole_Gfap-Pdgfrb/Widefield_5x_Whole_Gfap_Coverage.csv`data frame containing hemispheric areas measured in FIJI [@schindelin2012] using a custom-made script (https://osf.io/gbvsc) and manual measurements of GFAP convex hull.  

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
#library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","broom.mixed", "dplyr", "easystats", "distributional", "ggplot","gtsummary", "modelbased", "modelr", "modelsummary", "patchwork", "poorman", "tidybayes", "tidyverse"))

library(bayesplot)
library(bayestestR)
library(brms)
library(broom.mixed)
library(dplyr)
library(easystats)
library(distributional)
library(ggplot2)
library(gtsummary)
library(modelbased)
library(modelr)
library(modelsummary)
library(patchwork)
library(poorman)
library(tidybayes)
library(tidyverse)
```

# Visual themes

We use this visual theme to add aesthetics to our plots.

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Exploratory data visualization

We upload the data set:

```{r}
#| label: Gfap_Convex_Table
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

# We load the dataset in case is not present in the R environment
Gfap_Convex <- read.csv(file = "Data_Processed/Widefield_5x_Whole_Gfap-Pdgfrb/Widefield_5x_Whole_Gfap_Coverage.csv", header = TRUE)

gt::gt(Gfap_Convex[1:10,])
```

This data set display the following variables:

-   **Area_Contra** and **Area_Ipsi**: Area of the contrataleral (healthy) and ipsilateral (ischemic) hemispheres.

-   **Missing**: *1* if the analyzed image misses ipsilateral tissue due to breakdown, especially at 3 DPI.

-   **Area_Healthy**: Portion of the ipsilateral tissue under the GFAP convex hull. We expect this area to be populated by healthy NeuN^+^ cells.

-   **Hem_Ratio**: The ratio ipsilateral(Area_Ipsi)/contralateral(Area_Contra) hemispheres.

-   **Healthy_Ratio**: The ratio of Area_Healthy/contralateral(Area_Contra). We compare to GFAP covered area to the contralateral hemisphere to control for brain swelling/shrinkage.

We subset the data to exclude Sham animals (0 DPI) given that this time point has no defined GFAP convex hull.

```{r}
#| label: GfapCH_Subset  
#| include: true
#| warning: false
#| message: false
#| results: false

Gfap_Convex_Sub <- Gfap_Convex [(Gfap_Convex$Condition=="MCAO"),]
```

Next, we perform the conventional initial data visualization.

```{r}
#| label: fig-Gfap_Convex_Exploratory
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for GFAP convex hull
#| fig-width: 9
#| fig-height: 3

set.seed(8807)

### For density plot

Gfap_Convex_Dens <- 
  ggplot(
    data  = Gfap_Convex_Sub, 
    aes(x = Healthy_Ratio)
    ) +
  geom_density(size = 1.5) +
  geom_rug(size = 1) +
  scale_x_continuous(name ="GFAP area / contralateral (ratio)") +
  scale_y_continuous(name = "Density") +
  Plot_theme


### For Scatter plot

Gfap_Convex_Sctr <- 
  ggplot(
    data  = Gfap_Convex_Sub, 
    aes(x = DPI, 
        y = Healthy_Ratio)
    ) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
scale_y_continuous(name = "GFAP area / contralateral (ratio)") +
scale_x_continuous(
  name   ="DPI",
  breaks =c(3,7,14,30)
  ) +
Plot_theme

#Plot the result
Gfap_Convex_Dens |  Gfap_Convex_Sctr 
```

@fig-Gfap_Convex_Exploratory shows a range of \~ 40-80 with a single peak around 55. On the other hand, the scatter plot reveal a similar trend for all fitted lines. We judge that the differences at 3 or 14 DPI between the slopes does not add a meaningful explanatory power to non-linear models. Therefore, we are comfortable fitting a linear model to this data set.

# Statistical modeling for GFAP convex hull

We use the `brms` package [@brms; @burkner2017] to run Bayesian modeling. Here, we use weakly informative priors to optimize the Markov chain Monte Carlo (MCMC) and the exploration of the parameter space. We fit two models to investigate the coverage of GFAP in the ischemic hemisphere. 

-   **Gfap_Covex_Mdl1**: We predict `Gfap_Coverage`with `DPI`as a linear predictor with the notation:

$$
GFAP_{convex} = \alpha + \beta_{DPI} DPI_{i} + \epsilon_{i}
$$
This model uses the following user-defined priors:
$$
\begin{align}
\beta_{1} \sim Normal(0, 1) \\
\alpha \sim Student-t(3, 60, 20) \\
\sigma \sim Student-t(3, 0, 4), \sigma > 0
\end{align}
$$

-   **Gfap_Coverage_Mdl2:** We fit the same model with Heteroscedasticity (adding sigma as a predicted variables).

$$
Area_{i} = \alpha + \beta_{1} DPI_i + \epsilon_i \\ 
sigma = \alpha + \beta_{1} DPI_i + \epsilon_i
$$

This model uses the same priors as \_model 1_Mdl1 with a different formulation, given the changes in the classes and coefficients (see get_prior() for each model)

## Fit the model for GFAP convex hull

```{r}
#| label: Gfap_Convex_Modeling
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# Model 1: DPI as a linear predictor
############################################

Gfap_Convex_Mdl1 <- bf(Healthy_Ratio ~ DPI)

get_prior(Gfap_Convex_Mdl1, data = Gfap_Convex_Sub)

# Model prior
Gfap_Convex_Prior1 <- 
  c(prior(normal(0,1), class = b),
    prior(student_t(3, 60, 20), class = Intercept),
    prior(student_t(3, 0, 4), class = sigma, lb=0))
                                
# Fit model 1
Gfap_Convex_Fit1 <- 
  brm(
    data    = Gfap_Convex_Sub,
    family  = student,
    formula = Gfap_Convex_Mdl1,
    prior   = Gfap_Convex_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_5x_Whole_Gfap_Convex/Widefield_5x_Whole_Gfap_Convex_Fit1.rds",
    file_refit = "never") 
                     

# Add loo for model comparison
Gfap_Convex_Fit1 <- 
  add_criterion(Gfap_Convex_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2: DPI as a linear predictor for the GFAP convex hull and sigma
########################################################

Gfap_Convex_Mdl2 <- 
  bf(Healthy_Ratio ~ DPI, sigma ~ DPI)

get_prior(Gfap_Convex_Mdl2, data = Gfap_Convex_Sub)

Gfap_Convex_Prior2 <- 
  c(prior(normal(0,1), class = b, coef = DPI),
    prior(student_t(3, 60, 20), class = Intercept),
    prior(student_t(3, 0, 4), class = b, dpar = sigma))

# Fit model 2
Gfap_Convex_Fit2 <- 
  brm(
    data    = Gfap_Convex_Sub,
    family  = student,
    formula = Gfap_Convex_Mdl2,
    prior   = Gfap_Convex_Prior2,
    chains  = 4, 
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_5x_Whole_Gfap_Convex/Widefield_5x_Whole_Gfap_Convex_Fit1.rds",
    file_refit = "never")

# Add loo for model comparison
Gfap_Convex_Fit2 <- 
  add_criterion(Gfap_Convex_Fit2, c("loo", "waic", "bayes_R2"))
```

## Model comparison

We compare the models using WAIC criteria. Please refer to the `Widefield_5x_Ipsilateral_Gfap-IntDen.qmd` notebook for additional details on this approach. 

```{r}
#| label: Gfap_Convex_Compare
#| include: true
#| warning: false
#| message: false
#| results: false

Gfap_Convex_Comp <- 
  compare_performance(
    Gfap_Convex_Fit1, 
    Gfap_Convex_Fit2 
    )

Gfap_Convex_Comp
```

We explore it in graphical terms:

```{r}
#| label: fig-Gfap_Convex_Compare
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model camparison by WAIC
#| fig-height: 4
#| fig-width: 5

Gfap_Convex_W <- 
loo_compare(
  Gfap_Convex_Fit1, 
  Gfap_Convex_Fit2, 
  criterion = "waic")

# Generate WAIC graph
Gfap_Convex_WAIC <- 
  Gfap_Convex_W[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
ggplot(
  aes(x    = model_name, 
      y    = waic, 
      ymin = waic - se_waic, 
      ymax = waic + se_waic)
  ) +
  geom_pointrange(shape = 21) +
  scale_x_discrete(
    breaks=c("Gfap_Convex_Fit1", 
             "Gfap_Convex_Fit2"), 
             
    labels=c("Mdl1", 
             "Mdl2")) +
    
  coord_flip() +
  labs(x = "", 
       y = "WAIC (score)",
       title = "") +
  Plot_theme

Gfap_Convex_WAIC
```

@fig-Gfap_Convex_Compare depict that predicting sigma does not significantly improve the model. This can be seen by the similar variation across data points. Attending to these results, we will continue our exploration with the simplest model, Mdl1.

## Model diagnostics

We check the model fitting using `pp_checks`

```{r}
#| label: fig-Gfap_Convex_Diagnostics
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
#| fig-cap: Model diagnostics for GFAP convex hull
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

# Model 1
Gfap_Convex_Mdl1_pp <- 
  brms::pp_check(Gfap_Convex_Fit1, 
                 ndraws = 100) +
  labs(title = "Posterior predictive checks (model 1)",
  subtitle = "Formula: Gfap_Convex ~ DPI") +
  #scale_y_continuous(limits=c(0, 0.15)) +
  Plot_theme 

Gfap_Convex_Mdl1_pp
```

@fig-GfapCH_Diagnostics displays a good fit between predictions and data. We can explore further the model using `shinystan`.

```{r}
#| label: PdGfap_Convex_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

#launch_shinystan(Gfap_Coverage_Fit1)
```

# Model results

## Visualization of conditional effects

We extract posterior draws using the `fitted` function to build "Lineribbon" fits.

```{r}
#| label: fig-Gfap_Convex_Effects
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
#| fig-cap: Posterior for GFAP expression
#| fig-width: 5
#| fig-height: 4

nd <- Gfap_Convex_Sub %>% 
  distinct(DPI)

nd <- nd %>% 
  mutate(row = 1:n())

Gfap_Convex_Line <- fitted(
  Gfap_Convex_Fit1, 
  newdata = nd,
  summary = FALSE) %>% 
  data.frame() %>% 
  set_names(nd %>% pull(row)) %>% 
  mutate(draw = 1:n()) %>% 
  pivot_longer(-draw) %>% 
  mutate(row = as.double(name)) %>% 
  left_join(nd, by = "row")


Gfap_Convex_Line_fig <- 
  ggplot(Gfap_Convex_Line,
         aes(x = DPI, y = value)) +
  stat_lineribbon() +
  scale_fill_brewer() +
  geom_jitter(
    data  = Gfap_Convex, 
    aes(x = DPI, y=Healthy_Ratio),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  
  scale_y_continuous(name = "GFAP / conralateral area",
                     limits = c(30, 80)) +
  scale_x_continuous(name="DPI") +
  Plot_theme +
  theme(legend.direction = "vertical",
        legend.position = c(0.75, 0.85))
 
ggsave(
  plot     = Gfap_Convex_Line_fig, 
  filename = "Plots/Widefield_5x_Whole_Gfap_Convex/Widefield_5x_Whole_Gfap_Convex_DPI.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Gfap_Convex_Line_fig
```

@fig-Gfap_Convex_Effects shows that DPI does not meaningfully influence the convex hull of GFAP. This entails that once the GFAP barrier is established at 3 DPI, it does not significantly change its positioning within the ischemic brain.

## Posterior summary

We display the posterior summary using the `describe_posterior` function.

```{r}
#| label: Gfap_Convex_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Gfap_Convex_Fit1,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")

bayes_R2(Gfap_Convex_Fit1)


modelsummary(Gfap_Convex_Fit1, 
             shape = term ~ model + statistic,
             centrali2ty = "mean", 
             title = "GFAP convex hull following MCAO",
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "Tables/html/Widefield_5x_Whole_Gfap_Convex_Fit1_Table.html",
             )

Gfap_Convex_Fit1_Table <- modelsummary(Gfap_Convex_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Gfap_Convex_Fit1_Table, filename = "Tables/tex/Widefield_5x_Whole_Gfap_Convex_Fit1_Table.tex")
```
The results show a minuscule slope (-0.10) with a high uncertainty in its direction (95% CI = -0.38, 0.18). This indicates that the GFAP covered area is likely to stay equal overtime. The GFAP boundaries does not retract or expand after they are settled during the first week post ischemia. Still, this model has a low explanatory power R2= 0.03, given the high variability of the data.

# References

::: {#refs}
:::

```{r}
sessionInfo()
```
