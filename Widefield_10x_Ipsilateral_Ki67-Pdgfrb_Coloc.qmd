---
title-block-banner: true
title: "Analysis of Ki67/PDGFRβ colocalization in the ipsilateral hemisphere"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    degrees:
      - PhD
    affiliation: 
      - name: Univerisity Laval 
        department: Psychiatry and Neuroscience
        group: Laboratory of neurovascular interactions 
note: "GitHub: https://daniel-manrique.github.io/"
keywords: 
  - Ki67
  - PDGFRβ
  - Brain injury
  - Cell proliferation
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
    
csl: science.csl
bibliography: references.bib
---

# Preview

This notebook reports the analysis of Ki67 and PDGFRβ colocalization in the ipsilateral hemisphere following cerebral ischemia.

**Parent dataset:** Ki67 and PDGFRβ stained ischemic hemispheres imaged at 10x (with stitching). Samples are grouped at 0 (Sham), 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_10x_Ipsilateral_Ki67-Pdgfrb.zip`.

**Working dataset**: The `Data_Raw/Widefield_10x_Ipsilateral_Ki67-Pdgfrb/Image.csv`data frame contains the cell detection and colocalization analysis performed on CellProfiler [@stirling2021]. The CellProfiler pipeline is available at (https://osf.io/wdzk7).

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
#library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","dplyr", "easystats", "ggplot","gtsummary", "modelbased", "modelr", "modelsummary", "patchwork", "poorman","plyr", "spatstat", "tidybayes", "tidyverse", "viridis"))


library(bayesplot)
library(bayestestR)
library(brms)
library(dplyr)
library(easystats)
library(emmeans)
library(ggplot2)
library(gtsummary)
library(modelbased)
library(modelr)
library(modelsummary)
library(patchwork)
library(poorman)
library(plyr)
library(spatstat)
library(tidybayes)
library(tidyverse)
library(viridis)
```

# Visual themes

We create a visual theme to use in our plots.

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Load the data set

We load the dataset and handle it the subset the columns of interest.

```{r}
#| label: Ki67-Pdgfrb_Load 
#| include: true
#| warning: false
#| message: false
#| cache: true

# We load the dataset in case is not present in the R environment
Ki67_Cells <- read.csv(file = "Data_Raw/Widefield_10x_Ipsilateral_Ki67-Pdgfrb/Image.csv", header = TRUE)

## We subset the relevant columns (cell number)
Ki67_Data <- subset(Ki67_Cells, select = c("FileName_Pdgfrb_Mask", "Count_Ki67_Filtered", "Count_Pdgfrb_Filtered", "Count_Pdgfrb_Ki67_Colocalized"))

## And extract metadata from the image name
Ki67_Data  <- cbind(Ki67_Data, do.call(rbind , strsplit(Ki67_Data$FileName_Pdgfrb_Mask, "[_\\.]"))[,1:2])

Ki67_Data <- subset(Ki67_Data, select = -c(FileName_Pdgfrb_Mask))

## We Rename the relevant columns 
colnames(Ki67_Data) <- c("Ki67", "Pdgfrb", "Colocalized", "MouseID", "DPI")

## We set the factors
Ki67_Data$DPI <- factor(Ki67_Data$DPI, levels = c("0D", "3D", "7D", "14D", "30D"))

# Create an additional DPI variable (numeric)

DPI_mapping <- c("0D" = "0", "3D" = "3", "7D" = "7", "14D" = "14", "30D" = "30")
Ki67_Data$DPI_Cont <- as.numeric(DPI_mapping[as.character(Ki67_Data$DPI)])
```

Finally, we generate new columns to calculate the percentage of colocalized Ki67-PDGFRβ cells relative to the total of PDGFRβ cells (`Percentage_Pdgfrb`) and to the total of Ki67 (`Percentage_Ki67`)

```{r}
#| label: Ki67-Pdgfrb_Handle 
#| include: true
#| warning: false
#| message: false
#| cache: true

Ki67_Data$Percentage_Pdgfrb <- (Ki67_Data$Colocalized * 100) / Ki67_Data$Pdgfrb

Ki67_Data$Percentage_Ki67 <- (Ki67_Data$Colocalized * 100) / Ki67_Data$Ki67

write.csv(Ki67_Data, "Data_Processed/Widefield_10x_Ipsilateral_Ki67-Pdgfrb/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Coloc.csv", row.names = FALSE)

gt::gt(Ki67_Data[1:10,])
```

# Exploratory data visualization

We perform the exploratory visualization for the dataset.

```{r}
#| label: fig-Ki67_Coloc_Exploratory
#| include: true
#| warning: false
#| message: false
#| fig-cap: Exploratory data visualization 
#| fig-height: 5
#| fig-width: 5

set.seed(8807)

Ki67_Coloc_Sctr <- 
  ggplot(
    data  = Ki67_Data, 
    aes(x = DPI_Cont, 
        y = Percentage_Pdgfrb)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("% of PDGFRβ/Ki67+ cells")) +
  scale_x_continuous(name="DPI",
                     breaks=c(0, 3, 7,14,30)) +
  Plot_theme

Ki67_Coloc_Sctr
```

The graphs reveal an upsurge in the colocalization of the two markers at 3 DPI. We see that capturing the intercept implies the fitting of a non-linear model. Also, given the different variances of the data, we will account for heteroskedasticity.

# Statistical modeling

We'll fir a statistical model using a log-normal distribution in the `brms` package [@bürkner2018; @brms]. We fit the following models:

-   **Ki67_Pdgfrb_Mdl1:** We employ `DPI_Cont` as a predictor for the linear predictor for `Percentage_Pdgfrb`, the percentage of Ki67/PDGFRβ+ cells given the total number of PDGFRβ:

$$
Coloc_{i} = f_{s(DPI)}(DPI_{i}) + \epsilon_{i}
$$

This model uses the following weakly-informative priors:

$$
\begin{align}
\beta_{1} \sim Normal(0, 10) \\
\alpha \sim normal(0, 10) \\
\sigma \sim Student-t(3, 0, 50), \sigma > 0 \\
\end{align}
$$

-   **Ki67_Pdgfrb_Mdl2:** We fit a splines model with heteroscedasticity (sigma as additional response variable) keeping `DPI` the unique predictor:

$$
IntDen_{i} = f_{s(DPI)}(DPI_{i})   \\
sigma_{i} = f_{s(DPI)}(DPI_{i})  
$$

This model uses the same priors for model 1. The election of this weakly informative priors is based on previous research [@Chandran2021a] suggesting that up to 50% of PDGFRβ+ cells proliferate in the subsequent days following ischemia.

## Fit the models

```{r}
#| label: Ki67_Coloc_Modeling
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Model 1: DPI as a single predictor
Ki67_Pdgfrb_Mdl1 <- bf(Percentage_Pdgfrb ~ s(DPI_Cont, k = 5))

get_prior(Ki67_Pdgfrb_Mdl1, Ki67_Data, family = lognormal())

Ki67_Pdgfrb_Prior1 <- 
  c(prior(normal(0,50), class = b),
    prior(normal(0,50), class = Intercept, lb= 0),
    prior(student_t(3, 0, 50), class = sigma, lb=0))

# Fit model 1
Ki67_Pdgfrb_Fit1 <- 
  brm(
    data    = Ki67_Data,
    family  = lognormal(), 
    formula = Ki67_Pdgfrb_Mdl1,
    prior   = Ki67_Pdgfrb_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Coloc/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Ki67_Pdgfrb_Fit1 <- 
  add_criterion(Ki67_Pdgfrb_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2: DPI as a single predictor with sigma
Ki67_Pdgfrb_Mdl2 <- bf(Percentage_Pdgfrb ~ s(DPI_Cont, k = 5),
                       sigma ~ s(DPI_Cont, k = 5))

get_prior(Ki67_Pdgfrb_Mdl2, Ki67_Data, family = lognormal())

Ki67_Pdgfrb_Prior2 <- 
  c(prior(normal(0,50), class = b),
    prior(normal(0,50), class = Intercept, lb= 0),
    prior(student_t(3, 0, 50), class = b, dpar = sigma,  lb=0))

# Fit model 2
Ki67_Pdgfrb_Fit2 <- 
  brm(
    data    = Ki67_Data,
    family  = lognormal(), 
    formula = Ki67_Pdgfrb_Mdl2,
    prior   = Ki67_Pdgfrb_Prior2,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Coloc/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Fit2.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Ki67_Pdgfrb_Fit2 <- 
  add_criterion(Ki67_Pdgfrb_Fit2, c("loo", "waic", "bayes_R2"))
```

## Model comparison

We perform model comparison using the WAIC criteria for estimating the out-of-sample prediction error. We use the `compare_performance` function from the `performance` package, part of the `easystats` environment [@makowski2019; @performance; @easystats]

```{r}
#| label: Ki67Pdgfrb_Compare
#| include: true
#| warning: false
#| message: false
#| results: false

Ki67_Pdgfrb_Comp <- 
  compare_performance(
    Ki67_Pdgfrb_Fit1, 
    Ki67_Pdgfrb_Fit2, 
    metrics = "all")

Ki67_Pdgfrb_Comp
```

The results suggest that the first model is slightly less penalized by out-of-sample prediction. However, we judge that both models have a similar performance. We continue our inference with `Ki67_Pdgfrb_Fit1`.

We visualize the same results as a graph:

```{r}
#| label: fig-Ki67_Pdgfrb_Compare
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model camparison by WAIC
#| fig-height: 4
#| fig-width: 5

Ki67_Pdgfrb_W <- 
loo_compare(
  Ki67_Pdgfrb_Fit1, 
  Ki67_Pdgfrb_Fit2, 
  criterion = "waic")

# Generate WAIC graph
Ki67_Pdgfrb_WAIC <- 
  Ki67_Pdgfrb_W[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
ggplot(
  aes(x    = model_name, 
      y    = waic, 
      ymin = waic - se_waic, 
      ymax = waic + se_waic)
  ) +
  geom_pointrange(shape = 21) +
  scale_x_discrete(
    breaks=c("Ki67_Pdgfrb_Fit1", 
             "Ki67_Pdgfrb_Fit2"), 
            
    labels=c("Mdl1", 
             "Mdl2") 
             
    ) +
  coord_flip() +
  labs(x = "", 
       y = "WAIC (score)",
       title = "") +
  Plot_theme

Ki67_Pdgfrb_WAIC
```

## Model diagnostics

We check the model fitting using posterior predictive checks

```{r}
#| label: fig-Ki67_Pdgfrb_Diagnostics
#| include: true
#| warning: false
#| message: false
#| cache: true
#| fig-cap: Model dianostics using pp_checks
#| fig-height: 5
#| fig-width: 5
 
set.seed(8807)

Ki67_Pdgfrb_Coloc_Fit1_pp <- 
  brms::pp_check(Ki67_Pdgfrb_Fit1, 
                 ndraws = 100) +
  labs(title = "Posterior predictive checks",
  subtitle = "Formula: Percentage_Pdgfrb ~ s(DPI_Cont, k = 5)") +
  Plot_theme  
  
Ki67_Pdgfrb_Coloc_Fit1_pp
```

There are no significant deviations from the data. We can explore further the model using `shinystan`.

```{r}
#| label: Pdgfra_Coloc_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

#launch_shinystan(Ki67_Pdgfrb_Fit1)
```

# Model results

## Visualization of conditional effects

```{r}
#| label: fig-Ki67_Coloc_CE 
#| include: true
#| warning: false
#| message: false
#| fig-cap: Conditional effects for the percentage of ki67/PDGFRβ
#| fig-height: 5
#| fig-width: 5

set.seed(8807)

# We convert the estimates to a data frame
Ki67_Pdgfrb_DPI <- 
  conditional_effects(Ki67_Pdgfrb_Fit1)

Ki67_Pdgfrb_DPIdf <- 
  as.data.frame(Ki67_Pdgfrb_DPI$DPI)

Ki67_Pdgfrb_pred <- 
  Ki67_Data %>%
  data_grid(DPI_Cont, n = 10) %>%
  add_predicted_draws(
    Ki67_Pdgfrb_Fit1, 
    ndraws = 50)

Ki67_Pdgfrb_Fig <-  
  ggplot(
    data  = Ki67_Pdgfrb_DPIdf,
    aes(x = DPI_Cont,
        y = estimate__)
    )+
   geom_jitter(
    data  = Ki67_Data, 
    aes(x = DPI_Cont, y=Percentage_Pdgfrb),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  geom_ribbon(
    aes(ymin  = lower__, 
        ymax  = upper__),
        alpha = 0.2)+
  geom_line(
    size     = 1,
    position = position_dodge(0.05), 
    color    = "blue") +
  
  scale_y_continuous(name= expression("% of PDGFRβ/Ki67"),
                     limits = c(0, 15)) +
  scale_x_continuous(name="DPI",
                     breaks = c(0, 3, 7, 14, 30)) +
  Plot_theme 
 
  ggsave(
  plot     = Ki67_Pdgfrb_Fig, 
  filename = "Plots/Widefield_10x_Ki67-Pdgfrb_Coloc/Widefield_10x_Ki67-Pdgfrb_Fit1.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

 Ki67_Pdgfrb_Fig
```

@fig-Ki67_Coloc_CE shows an increasing trend in the colocalization of Ki67/PDGFRβ peaking during the first week post-ischemia.

## Posterior summary

Next, we plot the posterior summary using the `describe_posterior` function:

```{r}
#| label: tbl-Ki67_Pdgfrb_Coloc_Posterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Ki67_Pdgfrb_Fit1,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")

modelsummary(Ki67_Pdgfrb_Fit1, 
             shape = term ~ model + statistic,
             centrali2ty = "mean", 
             title = "Ki67/PDGFRβ+ cells following MCAO",
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "Tables/html/Widefield_10x_Ki67-Pdgfrb_Fit1_Table.html",
             )

Ki67_Pdgfrb_Fit1_Table <- modelsummary(Ki67_Pdgfrb_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Ki67_Pdgfrb_Fit1_Table, 
            filename = "Tables/tex/Widefield_10x_Ki67-Pdgfrb_Fit1_Table.tex")
```

## Estimate derivative

We estimate the derivative to separate positive from negative trends in the fitted curve and obtain more clear linear fits. In statistical modeling, derivatives provide a measure of how a predictor variable influences the response variable, offering a more nuanced interpretation beyond the sign and magnitude of parameter estimates.

In mathematical terms, the derivative of a smooth function $f(x)$ is defined as:

$$ 
f'(x) = \lim\_{{\Delta x \to 0}} \frac{f(x + \Delta x) - f(x)}{\Delta x} 
$$ {#eq-derivative}

For a Bayesian model where $y = f(x)$, the derivative $\frac{dy}{dx}$ or $f'(x)$ represents the rate of change in the response variable $y$ for a unit change in the predictor variable $x$. If the model is non-linear, this derivative is a function of $x$ itself, allowing us to visualize how this rate of change varies across different values of $x$.

First, we estimate point-to point derivatives:

```{r}
#| label: Pdgfra_Relation
#| include: true
#| warning: false
#| message: false

Ki67_Pdgfrb_est <- 
  estimate_relation(
    Ki67_Pdgfrb_Fit1, 
    at = "DPI_Cont", 
    ci = c(0.95))

Ki67_Pdgfrb_est

Ki67_Pdgfrb_Derivative <- estimate_smooth(Ki67_Pdgfrb_est, x = "DPI_Cont")

gt::gt(round(Ki67_Pdgfrb_Derivative , digits = 2)) %>%
gt::gtsave(filename = "Tables/html/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Fit2_Deriv.html")

gt::gt(round(Ki67_Pdgfrb_Derivative, digits = 2)) %>%
gt::gtsave(filename = "Tables/tex/Widefield_10x_Ipsilateral_Ki67-Pdgfrb_Fit2_Deriv.tex")
```
We see a sustained increase (slope = 2.06) for the colocalization of Ki67/PDGFRβ up to 3 DPI (Change of 6.87). This is followed by a decrease in slope (-0.23) up to 30 DPI (change of -6.10).

## Visualize derivatives

We can plot the derivative:

```{r}
#| label: fig-Pdgfra_Slopes
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Effect size od DPI for the percentage of ki67/PDGFRβ
#| fig-height: 5
#| fig-width: 5

Ki67_Pdgfrb_deriv <- 
  estimate_slopes(
    Ki67_Pdgfrb_Fit1,
    trend = "DPI_Cont",
     at = "DPI_Cont",
    length = 30
    )

# Visualize
Ki67_Pdgfrb_deriv_Fig <- 
  plot(Ki67_Pdgfrb_deriv) + 
  labs(x = "DPI_Cont", 
       y = "Effect of DPI",
       title = NULL
       ) +
  Plot_theme +
  theme(legend.position= "none")

ggsave(
  plot     = Ki67_Pdgfrb_deriv_Fig, 
  filename = "Plots/Widefield_10x_Ki67-Pdgfrb_Coloc/Widefield_10x_Ki67-Pdgfrb_deriv.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Ki67_Pdgfrb_deriv_Fig 
```

@fig-Pdgfra_Slopes shows graphically the effects of DPI in the log scale.

# References

::: {#refs}
:::


```{r}
sessionInfo()
```
