---
title-block-banner: true
title: "Analysis of PDGFR-B expression (Integrated density)"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    affiliation: Univerisity Laval (Laboratory of neurovascular interactions) 
keywords: 
  - GFAP analysis
  - Brain injury
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
    
csl: science.csl
bibliography: Widefield_5x_Pdgfrb_IntDen.bib
---

# Preview

This notebook reports the analysis for PDGFR-B expression using the FIJI-derived "Integrated density measurement".

**Parent dataset:** PDGFR-β and GFAP-stained ischemic hemispheres imaged at 5x (with stitching). Samples are grouped at 0 (Sham), 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_5x_Ipsilateral_Gfap-Pdgfrb.zip`.

**Working dataset**: The `Wide5x_Ipsi_Pdgfrb_Gfap_Inten.csv`data frame containing the integrated density of PDGFR-B measured in the ipsilateral hemisphere (`Gfap_IntDen`) using FIJI [@schindelin2012]. We perform scientific inference on this variable as a basis to understand PDGFR-B (pericyte) reactivity in our model of cerebral ischemia. The current knowledge suggest a close to linear increase in GFAP expression from the injury onset. We anticipate that PDGFR-B expression will increase in ischemic regions after the injury onset.


# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","dplyr", "easystats", "ggplot","modelbased", "modelr", "patchwork", "poorman", "tidybayes", "viridis"))
#devtools::install_github('m-clark/lazerhawk')

library(bayesplot)
library(bayestestR)
library(brms)
library(dplyr)
library(easystats)
library(ggplot2)
library(lazerhawk)
library(modelbased)
library(modelr)
library(patchwork)
library(poorman)
library(tidybayes)
library(viridis)
```

# Visual themes

We create a visual theme to use in our plots (ggplots).

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Exploratory data visualization

We load the `ProData/Pdgfrb_Gfap_Ipsi_5x_Inten.csv` dataset to very its content.

```{r}
#| label: tbl-Pdgfrb_Table
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

# We load the dataset in case is not present in the R environment
Pdgfrb_Summary <- read.csv(file = "ProData/Wide5x_Ipsi_Pdgfrb_Gfap_Inten.csv", header = TRUE)

knitr::kable(Pdgfrb_Summary[1:10, ])
```

From this table, we focus on `DPI` (Days post-ischemia) and `Pdgfr_IntDen` variables.`Pdgfr_IntDen` is the product of the stained area and the mean intensity as calculated in FIJI using the script available at https://osf.io/mqukx. Additionally, we'll use the `Tissue_Area` variable to fit a model relating PDGFR-B reactivity and hemispheric shrinkage.

Next, we visualize the raw data to guide the statistical modeling. We plot the response variable as a density, and a scatter plot (per DPI). In the latter, we fit a linear regression line (black), together with 2-degree (red) and 3-degree (green) polynomial lines to verify fir to non-linear trends.

## Exploratory data visualization

```{r}
#| label: fig-PdgfrbIntDen_Expl
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for Pdgfr-𝛽expression
#| fig-width: 9
#| fig-height: 3


set.seed(8807)


########################################################
# DENSITY PLOT
########################################################

Pdgfrb_IntDen_Dens <- 
  ggplot(
    data  = Pdgfrb_Summary, 
    aes(x = Pdgfr_IntDen)
    ) +
  geom_density(size = 1.5) +
  geom_rug(size = 1) +
  scale_x_continuous(name ="Pdgfr-β (IntDen)") +
  scale_y_continuous(name = "Density") +
  Plot_theme

ggsave(
  plot     = Pdgfrb_IntDen_Dens , 
  filename = "plots/Pdgfrb_IntDen_Dens.png", 
  width    = 12, 
  height   = 10, 
  units    = "cm")


########################################################
# SCATTER PLOT
########################################################

Pdgfrb_IntDen_Sctr <- 
  ggplot(
    data  = Pdgfrb_Summary, 
    aes(x = DPI, 
        y = Pdgfr_IntDen)
    ) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
scale_y_continuous(name = "Pdgfr-β (integrated density)") +
scale_x_continuous(
  name   ="Days post-ischemia (DPI) ",
  breaks =c(0, 3,7,14,30)
  ) +
Plot_theme

#Plot the result
Pdgfrb_IntDen_Dens |  Pdgfrb_IntDen_Sctr 
```

@fig-PdgfrbIntDen_Expl shows a range of \~ 0 - 1500. Without accounting for days-post ischemia (DPI), the response variable exhibits a single peak far from normal distributions. On the other hand, the scatter shows that there are no substantial differences between the fitted lines. Still, non-linear models capture between the deviation at 15 DPI.

## Statistical modeling for Pdgfr-𝛽 reactivity

We perform Bayesian modeling using weakly informative priors to optimize the exploration of the parameter space. We fit the following models:

-   **Pdgfrb_IntDen_Mdl1:** We use `DPI` as a linear predictor for PDGFR-𝛽 integrated density:

$Pdgfrbb-IntDen_{i} = \alpha + \beta_{1} DPI_{i} + \epsilon_{i}$

This model uses the following user-defined priors:

$\beta_{1} \sim Normal(0, 1)$

$\alpha \sim Student-t(3, 500, 300)$

$\sigma \sim Student-t(3, 0, 100)$, with $\sigma > 0$

-   **Pdgfrb_IntDen_Mdl2:** We use smooth terms (splines) on `DPI` as predictors.

$Area_{i} = f_{s(DPI)}(DPI_{i})$

This model uses the same priors as model 1.

-   **Pdgfrbb_IntDen_Mdl3:** We add sigma as a predicted variable using the same notation of Mdl3.

$Area_{i} = f_{s(DPI)}(DPI_{i}) + \epsilon_{i}$ $sigma_{i} = f_{s(DPI)}(DPI_{i}) + \epsilon_{i}$

This model uses the following used-defined priors:

$b \sim \mathcal{N}(100, 50)$ $\text{Intercept} \sim t_{3}(500, 300), \text{lb}=0$ $\sigma \sim t_{3}(0, 100), \text{class} = b, \text{lb}=0$

-   **Pdgfrb_IntDen_Mdl4** Finally, we investigate the correlation between brain shrinkage and Pdgfr-β integrated density. We do so by fitting a spline model with interaction using the `t2` function, which denote a tensor product smooth of the predictor variables `DPI` and `Tissue_Area` to model the response variable (`Pdgfr_IntDen`).

$$ 
 Pdgfr\_IntDen = \beta_0 + \sum_{i=1}^{k_1} \sum_{j=1}^{k_2} \beta_{ij} B_{1i}(DPI) B_{2j}(Tissue\_Area) + \epsilon
$$ Where: - \$ \beta\*0 \$ is the intercept. - \$ B\*{1i}(DPI) \$ and \$ B\_{2j}(Tissue_Area)\$ are basis functions for the `DPI` and `Tissue_Area` predictors. - \$ k_1\$ and \$ k_2 \$ are the number of basis functions for `DPI` and `Tissue_Area`, respectively. - $\beta_{ij}$ are the coefficients for the tensor product of the $i^{th}$ basis function of `DPI` and the $j^{th}$ basis function of `Tissue_Area`. - $\epsilon$ is the residual error.

This model uses the brms-default priors.

### Fit the models

```{r}
#| label: PdgfrbIntDen_Modeling_Ipsi5x
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

########################################################
# Model 1: DPI as a linear predictor
########################################################
Pdgfrb_IntDen_Mdl1 <- bf(Pdgfr_IntDen ~ DPI)

get_prior(Pdgfrb_IntDen_Mdl1, Pdgfrb_Summary)

Pdgfrb_IntDen_Prior1 <- 
  c(prior(normal(0,1), class = b),
    prior(normal(100,50), class = Intercept, lb= 0),
    prior(student_t(1, 0, 50), class = sigma, lb=0))

# Fit model 1
Pdgfrb_IntDen_Fit1 <- 
  brm(
    data    = Pdgfrb_Summary,
    formula = Pdgfrb_IntDen_Mdl1,
    prior   = Pdgfrb_IntDen_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/5. PdgfrbReactivity/Pdgfrb_IntDen_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_IntDen_Fit1 <- 
  add_criterion(Pdgfrb_IntDen_Fit1, c("loo", "waic", "bayes_R2"))


########################################################
# Model 2: Model with splines / DPI
########################################################

Pdgfrb_IntDen_Mdl2 <- bf(Pdgfr_IntDen ~ s(DPI, k = 5))

get_prior(Pdgfrb_IntDen_Mdl2, Pdgfrb_Summary)

# Fit model 2
Pdgfrb_IntDen_Fit2 <- 
  brm(
    data    = Pdgfrb_Summary,
    formula = Pdgfrb_IntDen_Mdl2,
    prior   = Pdgfrb_IntDen_Prior1,
    knots   = list(DPI = c(0, 3, 7, 14, 30)),
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/5. PdgfrbReactivity/Pdgfrb_IntDen_Fit2.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_IntDen_Fit2 <- 
  add_criterion(Pdgfrb_IntDen_Fit2, c("loo", "waic", "bayes_R2"))

########################################################
# Model 3: Model with splines / DPI and sigma
########################################################

Pdgfrb_IntDen_Mdl3 <- 
  bf(Pdgfr_IntDen ~ s(DPI, k=5),
     sigma ~  s(DPI, k=5)
     )

get_prior(Pdgfrb_IntDen_Mdl3, Pdgfrb_Summary)

Pdgfrb_IntDen_Prior2 <- 
  c(prior(normal(0, 1), class = b),
    prior(student_t(1, 100, 50), class = Intercept, lb= 0),
    prior(student_t(1, 0, 50), class = b, dpar=sigma, lb=0))

# Fit model 3
Pdgfrb_IntDen_Fit3 <- 
  brm(
    data    = Pdgfrb_Summary,
    formula = Pdgfrb_IntDen_Mdl3,
    prior   = Pdgfrb_IntDen_Prior2,
    knots   = list(DPI = c(0, 3, 7, 14, 30)),
    chains  = 4,
    cores   = 4,
    warmup  = 5000, 
    iter    = 10000, 
    seed    = 8807,
    control = list(adapt_delta = 0.999, max_treedepth = 15),
    file    = "BayesianModels/5. PdgfrbReactivity/Pdgfrb_IntDen_Fit3.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_IntDen_Fit3 <- 
  add_criterion(Pdgfrb_IntDen_Fit3, c("loo", "waic", "bayes_R2"))

########################################################
# Model 4: Spline interaction between DPI and hemispheric area
########################################################

Pdgfrb_IntDen_Mdl4 <- 
  bf(Pdgfr_IntDen ~ t2(DPI,Tissue_Area))

get_prior(Pdgfrb_IntDen_Mdl4, Pdgfrb_Summary)

# Fit model 4
Pdgfrb_IntDen_Fit4 <- 
  brm(
    data    = Pdgfrb_Summary,
    formula = Pdgfrb_IntDen_Mdl4,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/5. PdgfrbReactivity/Pdgfrb_IntDen_Fit4.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_IntDen_Fit4 <- 
  add_criterion(Pdgfrb_IntDen_Fit4, c("loo", "waic", "bayes_R2"))
```

### Model comparison

We perform model comparison using the WAIC criteria for estimating the out-of-sample prediction error. By considering both the log-likelihood of the observed data and the effective number of parameters, it provides a balance between model fit and complexity. Unlike some other criteria, WAIC inherently accounts for the posterior distribution of the parameters rather than relying on point estimates, making it particularly suited for Bayesian analyses. In this case, we exclude model 4 (Mdl4) for the comparison because it fulfills another purpose.

Given a data set and a Bayesian model, the WAIC is computed as:

$\text{WAIC} = -2 \times \left( \text{LLPD} - p_{\text{WAIC}} \right)$

Where: $\text{LLPD}$ is the log pointwise predictive density, calculated as the average log likelihood for each observed data point across the posterior samples.

$\text{WAIC}$ is the effective number of parameters, computed as the difference between the average of the log likelihoods and the log likelihood of the averages across posterior samples.

We use the `compare_performance` function from the `performance` package, part of the `easystats` environment [@performance; @easystats; @makowski2019]. We exclude model 4 given that it has another modeling purpose.

```{r}
#| label: PdgfrbIntDen_Compare
#| include: true
#| warning: false
#| message: false
#| results: false

Pdgfrb_IntDen_Comp <- 
  compare_performance(
    Pdgfrb_IntDen_Fit1, 
    Pdgfrb_IntDen_Fit2, 
    Pdgfrb_IntDen_Fit3, 
    metrics = "all")

Pdgfrb_IntDen_Comp
```

The output shows that model 3 is the less penalized (WAIC = 677) for out of sample prediction and has a slightly stronger explained variance (R2 = 0.59) when compared to model 2. Please note that an estimation for sigma is absent in this model as it was included as a response variable. This offers sufficient grounds to select model 3 (Mdl3) as our best alternative for scientific inference.

We can also visualize the results in graphical terms:

```{r}
#| label: fig-PdgfrbIntDen_Compare
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model camparison by WAIC
#| fig-height: 3
#| fig-width: 4

Pdgfrb_IntDen_W <- 
loo_compare(
  Pdgfrb_IntDen_Fit1, 
  Pdgfrb_IntDen_Fit2, 
  Pdgfrb_IntDen_Fit3, 
  criterion = "waic")

# Generate WAIC graph
Pdgfrb_IntDen_WAIC <- 
  Pdgfrb_IntDen_W[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
ggplot(
  aes(x    = model_name, 
      y    = waic, 
      ymin = waic - se_waic, 
      ymax = waic + se_waic)
  ) +
  geom_pointrange(shape = 21) +
  scale_x_discrete(
    breaks=c("Pdgfrb_IntDen_Fit1", 
             "Pdgfrb_IntDen_Fit2", 
             "Pdgfrb_IntDen_Fit3", 
             "Pdgfrb_IntDen_Fit4"),
    labels=c("Mdl1", 
             "Mdl2", 
             "Mdl3", 
             "Mdl4")
    ) +
  coord_flip() +
  labs(x = "", 
       y = "WAIC (score)",
       title = "") +
  Plot_theme

Pdgfrb_IntDen_WAIC
```

### Model diagnostics

To evaluate sample predictions, we perform the diagnostics for model 3 (Mdl3) using the `pp_check` (posterior predictive checks) function from `brms`. In the graph, 𝘺 shows the data and y\~ the simulated data.

```{r}
#| label: fig-PdgfrbIntDen_Diagnostics
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model diagnostics for PDGFR-𝛽 expression
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

color_scheme_set("darkgray")

# Model 4
Pdgfrb_IntDen_Mdl4_pp <- 
  brms::pp_check(Pdgfrb_IntDen_Fit4, 
                 ndraws = 20) +
  geom_density(lwd = 2) +
  labs(title = "Posterior predictive checks (model 4)",
  subtitle = "Formula: Pdgfrb_IntDen ~ s(DPI, K=5), sigma ~ s(DPI, K=5)") +
  #scale_y_continuous(limits=c(0, 0.15)) +
  Plot_theme + 
  legend_none() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.line=element_blank(),
        plot.subtitle = element_text(size = 10, color = "black"))

Pdgfrb_IntDen_Mdl4_int <- 
  pp_check(Pdgfrb_IntDen_Fit4, 
           type = "intervals",
           x = "DPI",
           ndraws = 50) +
    scale_x_continuous(
    name ="Days after ischemia (DPI)",
    limits = c(0, 30),
    breaks = c(0,3, 7, 14, 30)
    ) +
  Plot_theme +
  theme (legend.position= c(0.8, 0.8))


Pdgfrb_IntDen_PPchecks <-
  Pdgfrb_IntDen_Mdl4_pp + 
  plot_spacer() + 
  Pdgfrb_IntDen_Mdl4_int  + 
  plot_layout(ncol = 2, 
              nrow = 2, 
              widths = c(6, 1), 
              heights = c(1, 0.7))

Pdgfrb_IntDen_PPchecks
```

@fig-PdgfrbIntDen_Diagnostics shows that the model predictions do not deviate substantially from the data. We can explore further the model using `shinystan`:

```{r}
#| label: PdgfrbIntDen_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false

#launch_shinystan(Pdgfrb_IntDen_Fit4)
```

## Model results

### Visualization of conditional effects

Now that we have validated our model make fair predictions and captures the data dynamics, we can visualize the results using the `conditional_effects` function from `brms`. We add graph aesthetics using ggplot.

The `conditional_effects` function display the effects of predictors for brms-fitted models. It computes conditional effects of specified predictors while marginalizing over the remaining predictors. Thereby, it allows to visualization of single variable effects to make the data more interpretable. Mathematically, let $y = f(x_1, x_2, \ldots, x_n)$ denote the modeled relationship between the variable \$ y \$ and the predictor variables \$ x_1, x_2, \ldots, x_n \$. The `conditional_effects` function calculates the conditional expectations $E[y | x_i]$ for a given \$ x_i \$, marginalizing over other predictors. Formally, it can be represented in this manner:

$$
 E[y | x_i] = \int f(x_1, x_2, \ldots, x_n) p(x_1, x_2, \ldots, x_{i-1}, x_{i+1}, \ldots, x_n) dx_1 dx_2 \ldots dx_{i-1} dx_{i+1} \ldots dx_n
$$ Here, we want to visualize the effect of DPI in PDGFR-𝛽expression

```{r}
#| label: fig-PdgfrbIntDen_CondEff
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior for PDGFR-𝛽 expression
#| fig-width: 9
#| fig-height: 3

set.seed(8807)

# We convert the estimates to a data frame
Pdgfrb_IntDen_DPI <- 
  conditional_effects(Pdgfrb_IntDen_Fit3)

Pdgfrb_IntDen_DPIdf <- 
  as.data.frame(Pdgfrb_IntDen_DPI$DPI)

Pdgfrb_IntDen_pred <- 
  Pdgfrb_Summary %>%
  data_grid(DPI, n = 10) %>%
  add_predicted_draws(
    Pdgfrb_IntDen_Fit3, 
    ndraws = 50)

Pdgfrb_IntDen_DPI_Fig <-  
  ggplot(
    data  = Pdgfrb_IntDen_DPIdf,
    aes(x = DPI,
        y = estimate__)
    )+
  geom_jitter(
    data  = Pdgfrb_IntDen_pred, 
    aes(x = DPI, 
        y = .prediction), 
    width = 0.5, 
    color = "navyblue", 
    shape = 1, 
    size  = 1.5, 
    alpha = 1/3)+
  geom_jitter(
    data  = Pdgfrb_Summary, 
    aes(x = DPI, y=Pdgfr_IntDen),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  geom_ribbon(
    aes(ymin  = lower__, 
        ymax  = upper__),
        alpha = 0.2)+
  geom_line(
    size     = 1,
    position = position_dodge(0.05), 
    color    = "blue") +
  scale_y_continuous(
    name = "Pdgfrb-β (IntDen)",
    limits = c(0, 1500),
    breaks = seq(0, 1500, 500)
    ) +
  scale_x_continuous(name="DPI") +
  Plot_theme

ggsave(
  plot     = Pdgfrb_IntDen_DPI_Fig, 
  filename = "Plots/Pdgfrb_IntDen_DPI.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")


# Plot smooths for sigma

Pdgfrb_IntDen_Smooths <- 
  conditional_smooths(Pdgfrb_IntDen_Fit3)

Pdgfrb_IntDen_Sigma_df <- 
  as.data.frame(Pdgfrb_IntDen_Smooths$`sigma: s(DPI,k=5)`)

Pdgfrb_IntDen_Sigma_fig <-  
  ggplot(Pdgfrb_IntDen_Sigma_df,
         aes(x = DPI,y = estimate__))+
  geom_ribbon(
    aes(ymin  =lower__, 
        ymax = upper__), 
    alpha = 0.2)+
  geom_line(size  = 1,
            color ="blue",
            position = position_dodge(0.05)) +
  scale_y_continuous(name= expression("Pdgfrb-β (log)"[sigma])) +
  scale_x_continuous(name="DPI") +
  Plot_theme
          
ggsave(plot     = Pdgfrb_IntDen_Sigma_fig, 
       filename = "Plots/Pdgfrb_IntDen_Sigma.png", 
       width    = 9, 
       height   = 9, 
       units    = "cm")

Pdgfrb_IntDen_DPI_Fig | Pdgfrb_IntDen_Sigma_fig
```

@fig-PdgfrbIntDen_CondEff shows the fit for PDGFR-𝛽integrated density and sigma. We can visualize an increasing trend during the first two weeks after injury. In contrast to GFAP reactivity, our model predicts a plateau phase for PDGFR-𝛽 cells. This implies that PDGFR-𝛽 integrated density remains constant despite brain shrinkage. We ponder these dynamics is featured by an exchange between area and intensity, given that PDGFR-𝛽 appear to remain (and likely loss) in regions prone to shrinkage.

### Posterior summary

Now, we plot the posterior summary using the `describe_posterior` function from `bayestestR` package [@bayestestR; @makowski2019].

```{r}
#| label: PdgfrbIntDen_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Pdgfrb_IntDen_Fit3,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")
```

Next, we generate a markdown table to add to the supplementary material of the research article.

```{r}
#| label: tbl-PdgfrbIntDen_PosteriorTable_Ipsi5x
#| include: true
#| warning: false
#| message: false
#| results: false
#| tbl-cap: "Posterior summary for PDGFR-𝛽 expression (markdown)"
#| 
brms_SummaryTable(Pdgfrb_IntDen_Fit3,
  formatOptions = list(digits = 1, nsmall = 2),
  round = 2,
  astrology = FALSE,
  hype = FALSE,
  panderize = TRUE,
  justify = NULL,
  seed = 8807)
```

### Estimate derivative

We can estimate the derivative to separate positive from negative trends in the fitted curve and obtain more clear linear fits. In statistical modeling, derivatives provide a measure of how a predictor variable influences the response variable, offering a more nuanced interpretation beyond the sign and magnitude of parameter estimates.

In mathematical terms, the derivative of a smooth function $f(x)$ is defined as:

$$ f'(x) = \lim\_{{\Delta x \to 0}} \frac{f(x + \Delta x) - f(x)}{\Delta x} $$ {#eq-derivative}

For a Bayesian model where $y = f(x)$, the derivative $\frac{dy}{dx}$ or $f'(x)$ represents the rate of change in the response variable $y$ for a unit change in the predictor variable $x$. If the model is non-linear, this derivative is a function of $x$ itself, allowing us to visualize how this rate of change varies across different values of $x$.

First, we estimate point-to point derivatives:

```{r}
#| label: PdgfrbIntDen_EstimateRelation
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Pdgfrb_IntDen_est <- 
  estimate_relation(
    Pdgfrb_IntDen_Fit3, 
    at = "DPI", 
    ci = c(0.95))

Pdgfrb_IntDen_est
```

Here, we see different "fragments" from the curve with predicted point estimates and their uncertainty. This table is more informative that the raw posterior summary from splines.

To summarize further, we can use `estimate_smooth`function.

```{r}
#| label: PdgfrIntDen_EstimateSmooth
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
 
estimate_smooth(Pdgfrb_IntDen_est, x = "DPI")
```

The output predicts a sustained increase (slope = 36) for PDGFR-𝛽 integrated density up to \~ 23 DPI (Change of 841, 95%CI = 831 - 1222). This is followed by a slightly decrease in slope (-4.4) at 30 DPI.

### Visualize derivatives

Also, we can plot the derivatives:

```{r}
#| label: fig-Pdgfrb_EstimateSlopes
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Derivatives for PDGFR-𝛽 expression
#| fig-height: 3
#| fig-width: 4

Pdgfrb_IntDen_deriv <- 
  estimate_slopes(
    Pdgfrb_IntDen_Fit3,
    trend = "DPI",
     at = "DPI",
    length = 30
    )

# Visualize
Pdgfrb_IntDen_deriv_Fig <- 
  plot(Pdgfrb_IntDen_deriv) + 
  labs(x = "DPI", 
       y = "Effect of DPI",
       title = NULL
       ) +
  Plot_theme +
  theme(legend.position= "none")

ggsave(
  plot     = Pdgfrb_IntDen_deriv_Fig, 
  filename = "Plots/Pdgfrb_IntDen_deriv.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Pdgfrb_IntDen_deriv_Fig 
```

@fig-Pdgfrb_EstimateSlopes shows that in the chronic phase (after two weeks post-ischemia), there is negligible change in PDGFR-𝛽 integrated density.

## PDGFR-𝛽 relation to hemispheric area

Previously, we fitted a forth model (Pdgfr_IntDen \~ t2(DPI,Tissue_Area)) to investigate the relation between PDGFR-𝛽 integrated density and hemispheric area.

Now, we visualize the results using the `conditional_smooths` function from `brms`.

```{r}
#| label: PdgfrbIntDen_Hemis
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: PDGFR-𝛽 relation with hemispheric area
#| fig-width: 3
#| fig-height: 3

set.seed(8807)

# We convert the estimates to a data frames
Pdgfrb_IntDen_Area <- conditional_smooths(Pdgfrb_IntDen_Fit4)

Pdgfrb_IntDen_Area_Fig  <- 
  plot(Pdgfrb_IntDen_Area, 
       plot = FALSE)[[1]] +
  
  scale_y_continuous(name = expression ("Hemispheric area (mm)"^2)) +
  scale_x_continuous(name="DPI") +
    guides(colour = guide_colourbar(direction = "horizontal")) +
  guides(colour = guide_colourbar(barheight = unit(2, "cm"))) +
  scale_color_gradientn(
    name = "IntDen", 
    colors = viridis(6)) +
  Plot_theme +
  theme(
    legend.position = c(0.17, 0.8))
  
ggsave(
  plot     = Pdgfrb_IntDen_Area_Fig , 
  filename = "Plots/Pdgfrb_IntDen_Area.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Pdgfrb_IntDen_Area_Fig
```

@PdgfrbIntDen_Hemis estimates that PDGFR-𝛽 reactivity increases with DPI and brain shrinkage. This might imply that brain shrinkage is associated with PDGFR-𝛽 expression, an aspect that can be further explored with causal inference in our stroke model.

# Analysis of PDGFR-𝛽^low^ and PDGFR-𝛽^high^ cells

The `Pdgfrb_Gfap_Ipsi_5x_Inten.csv`dataset contains the number of PDGFR-𝛽^low^ (Pdgfrb_NonReact) and PDGFR-𝛽^high^ (Pdgfrb_React) cells in the ischemic hemisphere. In this section, we analyze the proportions and distribution of this cell populations.

## Exploratory data visualization

We perform the usual exploratory visualization for PDGFR-𝛽^low^ and PDGFR-𝛽^high^

```{r}
#| label: fig-PdgfrbLowHigh_Exploratory
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for PDGFR-𝛽^low^ and PDGFR-𝛽^high^
#| fig-width: 9
#| fig-height: 3

set.seed(8807)

########################################################
# PDGFR-𝛽^low^
########################################################

Pdgfrb_Low_Sctr <- 
  ggplot(
    data  = Pdgfrb_Summary, 
    aes(x = DPI, 
        y = Pdgfr_NonReact)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("Number of PDGFR-β"^low)) +
  scale_x_continuous(name="DPI",
                     breaks=c(0, 3, 7,14,30)) +
  Plot_theme
  

########################################################
# PDGFR-𝛽^high^
########################################################

Pdgfrb_High_Sctr <- 
  ggplot(
    data  = Pdgfrb_Summary, 
    aes(x = DPI, 
        y = Pdgfr_React)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("Number of PDGFR-β"^high)) +
  scale_x_continuous(name="DPI",
                     breaks=c(0, 3, 7,14,30)) +
  Plot_theme


Pdgfrb_Low_Sctr | Pdgfrb_High_Sctr
```

@PdgfrbLowHigh_Exploratory show that PDGFR-𝛽^low^ (non-reactive cells) are not well fitted due to the sharp drop at 3 DPI. On the other hand, we see that non-linear models could fit PDGFR-𝛽^high^ cells. The precedent implies that PDGFR-𝛽 reactivity is strongly driven by PDGFR-𝛽^high^ (reactive) cells.

## Statistical modeling for the proportion of PDGFR-𝛽^low^ and PDGFR-𝛽^high^ cells

Considering that PDGFR-𝛽^low^ and PDGFR-𝛽^high^ cells are two mirror populations conditional on the total number of PDGFR-𝛽 (PDGFR-𝛽^low^ + PDGFR-𝛽^high^ = PDGFR-𝛽^total^), we will use a logistic model to analyze the cell proportions. For this purpose, we employ the binomial family distribution, where the response variable represents a series of Bernoulli trials (PDGFR-𝛽^high^ or PDGFR-𝛽^low^)in a fixed number of independent trials (PDGFR-𝛽^total^). This family is particularly well-suited for interpreting the underlying event probabilities.

Mathematically, the probability mass function (PMF) for a binomial distribution is given as:

$$
P(y | n, p) = \binom{n}{y} p^y (1 - p)^{n - y}
$$ Where: - $y$ is the number of successes. - $n$ is the number of trials. - $p$ is the probability of success on an individual trial. - $\binom{n}{y}$ is the binomial coefficient, representing the number of ways to choose $y$ successes in $n$ trials.

For a `brms` model, the linear predictor $\eta$ is linked to the probability $p$ of success using a link function, commonly the logit function:

$$
log\left(\frac{p}{1 - p}\right) = \eta
$$ Here, we fit to Bayesian models using weakly informative priors to optimize the exploration of the parameter space:

-   **Pdgfrb_Prop_Mdl1:** We use `DPI` as a linear predictor for the probability of PDGFR-𝛽^high^:

$$
\log\left(\frac{p_{i}}{1 - p_{i}}\right) = \alpha + \beta_{1} \times DPI_{i}
$$ Where: - $p_{i}$ is the probability of `Pdgfr_React` being a success on the $i^{th}$ trial and \$DPI\_{i} is the $i^{th}$ observed value of `DPI`.

-   **Pdgfrb_Prop_Mdl2:** We use `DPI` with splines and 5 knots:

$$
\log\left(\frac{p_{i}}{1 - p_{i}}\right) = \alpha + s(DPI_{i}, k = 5)
$$ Where: - $p_{i}$ is the probability of `Pdgfrb_React` being a success on the $i^{th}$ trial. - $DPI_{i}$ is the $i^{th}$ observed value of `DPI`. - $s(DPI_{i}, k = 5)$ is a smooth function of `DPI` with 5 basis functions.

The observed counts for `Pdgfrb_React` out of `Pdgfrb_Total` are modeled as a binomial distribution with probability $p_{i}$.

Both models use default `brms` priors.\`

### Fit the model

```{r}
#| label: PdgfrbLowHigh_Modeling
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

########################################################
# Model 1: DPI as a linear predictor
########################################################

Pdgfrb_Prop_Mdl1 <- bf(Pdgfr_React | trials(Pdgfr_Total) ~ DPI)

get_prior(Pdgfrb_Prop_Mdl1, Pdgfrb_Summary, family = binomial())

# Fit model 1
Pdgfrb_Prop_Fit1 <- 
  brm(
    data    = Pdgfrb_Summary,
    family  = binomial(), 
    formula = Pdgfrb_Prop_Mdl1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/6. PdgfrbLowHigh/Pdgfrb_Prop_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_Prop_Fit1 <- 
  add_criterion(Pdgfrb_Prop_Fit1, c("loo", "waic", "bayes_R2"))

########################################################
# Model 1: DPI as predictor with splines
########################################################

Pdgfrb_Prop_Mdl2 <- bf(Pdgfr_React | trials(Pdgfr_Total) ~ s(DPI, k =5))

get_prior(Pdgfrb_Prop_Mdl2, Pdgfrb_Summary, family = binomial())

# Fit model 2
Pdgfrb_Prop_Fit2 <- 
  brm(
    data    = Pdgfrb_Summary,
    family  = binomial(), 
    formula = Pdgfrb_Prop_Mdl2,
    knots   = list(DPI = c(0, 3, 7, 14, 30)),
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/6. PdgfrbLowHigh/Pdgfrb_Prop_Fit2.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_Prop_Fit2 <- 
  add_criterion(Pdgfrb_Prop_Fit2, c("loo", "waic", "bayes_R2"))
```

### Model comparison

We perform model comparison as done in [Model comparison]

```{r}
#| label: PdgfrbProp_Compare
#| include: true
#| warning: false
#| message: false
#| results: false

Pdgfrb_Prop_Comp <- 
  compare_performance(
    Pdgfrb_Prop_Fit1, 
    Pdgfrb_Prop_Fit2 
    )

Pdgfrb_Prop_Comp
```

In both models, the R2 is over 0.9. However, we can see that model 2 (with splines) is far less penalized for out of sample prediction (5084 vs 12480). We can visualize the same results as a graph:

```{r}
#| label: fig-PdgfrbProp_Compare
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model camparison by WAIC
#| fig-height: 3
#| fig-width: 4

Pdgfrb_Prop_W <- 
loo_compare(
  Pdgfrb_Prop_Fit1, 
  Pdgfrb_Prop_Fit2, 
  criterion = "waic")

# Generate WAIC graph
Pdgfrb_Prop_WAIC <- 
  Pdgfrb_Prop_W[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
ggplot(
  aes(x    = model_name, 
      y    = waic, 
      ymin = waic - se_waic, 
      ymax = waic + se_waic)
  ) +
  geom_pointrange(shape = 21) +
  scale_x_discrete(
    breaks=c("Pdgfrb_Prop_Fit1", 
             "Pdgfrb_Prop_Fit2"), 
             
    labels=c("Mdl1", 
             "Mdl2")) +
    
  coord_flip() +
  labs(x = "", 
       y = "WAIC (score)",
       title = "") +
  Plot_theme

Pdgfrb_Prop_WAIC
```

Observing this, we can continue doing scientific inference using model 2.

### Model diagnostics

We check the model fitting using posterior predictive checks

```{r}
#| label: PdgfrbProp_Diagnistics
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model diagnostics for the probability of PDGFR-𝛽^high^
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

color_scheme_set("darkgray")

Pdgfrb_Prop_Mdl2_pp <- 
  brms::pp_check(Pdgfrb_Prop_Fit2, 
                 ndraws = 20) +
  geom_density(lwd = 2) +
  labs(title = expression("Posterior predictive checks (Pdgfrb-β)"),
    subtitle = "Formula: Pdgfrb_React | Pdgfrb_Total ~ s(DPI, k = 5)") +
  Plot_theme + 
  legend_none() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.line=element_blank(),
        plot.subtitle = element_text(size = 10, color = "black"))

Pdgfrb_Prop_Mdl2_int <- 
  pp_check(Pdgfrb_Prop_Fit2, 
           type='intervals',
           ndraws = 50) +
  
  scale_x_continuous(
    name ="Injury course",
    breaks = c(0,3, 7, 14, 30),
    labels = c("0","3", "7", "14", "30"),
    limits = c(0, 30)
    ) +
  scale_y_continuous(limits = c(0, 5000)) +             
  Plot_theme +
  theme (legend.position= c(1.1, 0.8))

Pdgfrb_Prop_PPchecks <-
  Pdgfrb_Prop_Mdl2_pp + 
  plot_spacer() + 
  Pdgfrb_Prop_Mdl2_int  + 
  plot_layout(ncol = 2, 
              nrow = 2, 
              widths = c(6, 1), 
              heights = c(1, 0.7))

Pdgfrb_Prop_PPchecks
```

There are no significant deviations from the data. We can explore further the model using `shinystan`.

```{r}
#| label: PdgfrbProp_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

#launch_shinystan(Pdgfrb_Prop_Fit2)
```

## Model results

### Visualization of conditional effects

We use the conditional effects function as done in [Visualization of conditional effects]

```{r}
#| label: fig-PdgfrbProp_CondEff
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior for the probability of PDGFR-𝛽^high^
#| fig-width: 3
#| fig-height: 3

set.seed(8807)

# We create the graph for convex hull
Pdgfrb_Prop_DPI <- 
  conditional_effects(Pdgfrb_Prop_Fit2)

Pdgfrb_Prop_DPI <- plot(Pdgfrb_Prop_DPI, 
       plot = FALSE)[[1]]

Pdgfrb_Prop_fig <- Pdgfrb_Prop_DPI  + 
  scale_y_continuous(name = expression ("Pr. of Pdgfrb-β"^high)) +
  scale_x_continuous(name="DPI") +
  scale_color_manual(
    values = c("#0048BA", "red"),
    name="Condition"
    ) +
  scale_fill_manual(
    values = c("#0048BA", "red"),
    name="Condition"
    ) +

  Plot_theme +
  theme(legend.position = "top", legend.direction = "horizontal")

ggsave(
  plot     = Pdgfrb_Prop_fig, 
  filename = "Plots/Pdgfrb_Prop_fig.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Pdgfrb_Prop_fig
```

@PdgfrbProp_CondEff show an increasing probability for reactive PDGFR-𝛽 with a low uncertainty. This is largely consistent with the integrated density measurements, suggesting that PDGFR-𝛽 reactivity in chronic stages is largely driven by PDGFR-𝛽^high^ cells.

### Posterior summary

Next, We plot the posterior summary using the `describe_posterior` function:

```{r}
#| label: PdgfrbProp_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Pdgfrb_Prop_Fit2,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")
```

We generate a markdown table:

```{r}
#| label: PdgfrbProp_PosteriorTable
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

brms_SummaryTable(Pdgfrb_Prop_Fit2,
  formatOptions = list(digits = 1, nsmall = 2),
  round = 2,
  astrology = FALSE,
  hype = FALSE,
  panderize = TRUE,
  justify = NULL,
  seed = 8807)
```

We did not found a tool the calculate derivatives from binomial models. Therefore, we must perform scientific inference based on the provided conditional effects. We can visualize a sharp increase in the probability of PDGFR-𝛽^high^ up to the second-third weeks post-ischemia. Followed by the plateau phase indicated by the integrated density estimations.

# Analysis of PDGFR-𝛽^low^ and PDGFR-𝛽^high^ cells for striatal lesions

First, we load the data set.

```{r}
#| label: Pdgfrb_Striatum_Table
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

# We load the dataset in case is not present in the R environment
Pdgfrb_Striatum <- read.csv(file = "DataTables/Pdgfr_Gfap_Striatal_5x_Inten.csv", header = TRUE)

knitr::kable(Pdgfrb_Striatum [1:10, ])
```

## Exploratory data visualization

We perform the customary exploratory visualization for the two data sets. However, given that this data set comprises just two time points, we fit only lines for linear models.

```{r}
#| label: Pdgfrb_Striatum_LowHigh_Exploratory
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for PDGFR-𝛽^low^ and PDGFR-𝛽^high^ (striatal lesions)
#| fig-width: 9
#| fig-height: 3


set.seed(8807)

########################################################
# PDGFR-𝛽^low^
########################################################

Striatum_Pdgfr_Low_Sctr <- 
  ggplot(
    data  = Pdgfrb_Striatum, 
    aes(x = DPI, 
        y = Pdgfr_NonReact)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("Number of PDGFR-β"^low)) +
  scale_x_continuous(name="Days post-ischemia (DPI) ",
                     breaks=c(14,30)) +
  Plot_theme
  

########################################################
# PDGFR-𝛽^low^
########################################################

Striatum_Pdgfr_High_Sctr <- 
  ggplot(
    data  = Pdgfrb_Striatum, 
    aes(x = DPI, 
        y = Pdgfr_React)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("Number of PDGFR-β"^high)) +
  scale_x_continuous(name="Days post-ischemia (DPI) ",
                     breaks=c(14,30)) +
  Plot_theme
  
Striatum_Pdgfr_Low_Sctr | Striatum_Pdgfr_High_Sctr
```

@Pdgfrb_Striatum_LowHigh_Exploratory show that PDGFR-β^low^ (non-reactive cells) show a wide dispersion give the reduced number of observations at 14 DPI. Meanwhile, PDGFR-β^high^ display an increasing trend from 14 to 30 DPI. As before, we will fit the model using a binomial family distribution. Given that

## Statistical modeling for the proportion of PDGFR-𝛽^low^ and PDGFR-𝛽^high^ cells (striatal lesions)

### Fit the model

We fit a linear model using a binomial distribution (described in [Statistical modeling for the proportion of PDGFR-𝛽low and PDGFR-𝛽high cells]). We employ `brms` default priors.

```{r}
#| label: Pdgfrb_Striatum_LowHigh_Modeling
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Pdgfr_Prop_Striatal_Mdl1 <- bf(Pdgfr_React | trials(Pdgfr_Total) ~ DPI)

get_prior(Pdgfr_Prop_Striatal_Mdl1, Pdgfrb_Striatum, family = binomial())

# Fit model 1
Pdgfr_Prop_Striatal_Fit1 <- 
  brm(
    data    = Pdgfrb_Striatum,
    family  = binomial(), 
    formula = Pdgfr_Prop_Striatal_Mdl1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "BayesianModels/6. PdgfrbLowHigh/Pdgfrb_Prop_Striatal_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfr_Prop_Striatal_Fit1 <- 
  add_criterion(Pdgfr_Prop_Striatal_Fit1, c("loo", "waic", "bayes_R2"))
```

### Model diagnostics

As customary, we perform model checks using the `pp_check` function:

```{r}
#| label: Pdgfrb_Striatum_LowHigh_Diagnistics 
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
#| fig-cap: Model diagnostics for the probability of PDGFR-𝛽^high^ (striatal lesions)
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

Pdgfr_Prop_Striatal_Mdl1_pp <- 
  brms::pp_check(Pdgfr_Prop_Striatal_Fit1, 
                 ndraws = 20) +
  geom_density(lwd = 2) +
  labs(title = expression("Posterior predictive checks (PDGFR-β)"),
    subtitle = "Formula: PDGFR_React | PDGFR_Total ~ DPI") +
  Plot_theme + 
  legend_none() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.line=element_blank(),
        plot.subtitle = element_text(size = 10, color = "black"))

Pdgfr_Prop_Striatal_Mdl1_int <- 
  pp_check(Pdgfr_Prop_Striatal_Fit1, 
           type='intervals',
           ndraws = 50) +
Plot_theme +
theme (legend.position= c(1.1, 0.8))

Pdgfr_Prop_Striatal_PPchecks <-
  Pdgfr_Prop_Striatal_Mdl1_pp + 
  plot_spacer() + 
  Pdgfr_Prop_Striatal_Mdl1_int  + 
  plot_layout(ncol = 2, 
              nrow = 2, 
              widths = c(6, 1), 
              heights = c(1, 0.7))

Pdgfr_Prop_Striatal_PPchecks
```
This model has moderate deviations from the data. We complement this assessment by calculating Leave-One-Out Cross-Validation (Loo) using the `loo` function from `brms`. 

```{r}
#| label: Pdgfrb_Striatum_Loo
#| include: true
#| warning: false
#| message: false

loo(Pdgfr_Prop_Striatal_Fit1)
```
The results show that most observation are problematic. In particular, 57% of observations belonging to the very bad category, suggest that the importance sampling weights for these observations are highly variable. Therefore, it is fair to ponder that this model must be considered with caution. 

## Model results

### Visualization of conditional effects

```{r}
#| label: fig-PDGFRProp_Striatal_CondEff
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior for PDGFR-𝛽^low^ and PDGFR-𝛽^high^ (striatal lesions)
#| fig-width: 4
#| fig-height: 3

set.seed(8807)

# We create the graph for convex hull
Pdgfr_Prop_Striatal_DPI <- 
  conditional_effects(Pdgfr_Prop_Striatal_Fit1)

Pdgfr_Prop_Striatal_DPI <- plot(Pdgfr_Prop_Striatal_DPI, 
       plot = FALSE)[[1]]

Pdgfr_Prop_Striatal_fig <- Pdgfr_Prop_Striatal_DPI  + 
  scale_y_continuous(name = expression ("Pr. of PDGFR-β"^high)) +
  scale_x_continuous(name="DPI") +
  scale_color_manual(
    values = c("#0048BA", "red"),
    name="Condition"
    ) +
  scale_fill_manual(
    values = c("#0048BA", "red"),
    name="Condition"
    ) +

  Plot_theme +
  theme(legend.position = "top", legend.direction = "horizontal")

ggsave(
  plot     = Pdgfr_Prop_Striatal_fig, 
  filename = "Plots/Pdgfr_Prop_Striatal_fig.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Pdgfr_Prop_Striatal_fig
```

@fig-PDGFRProp_Striatal_CondEff show an increasing probability for reactive PDGFR-𝛽 with a low uncertainty. This shows a clear contrast with cortico-striatal lesions which exhibit twice the probability at 14 and 30 DPI.

### Posterior summary

Here, we visualize the results in numerical terms using the `describe_posterior` function:

```{r}
#| label: PdgfrProp_Striatal_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false

describe_posterior(
  Pdgfr_Prop_Striatal_Fit1,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")
```
Also, we generate the markdown table:

```{r}
#| label: PdgfrProp_Striatal_PosteriorTable
#| include: true
#| warning: false
#| message: false
#| results: false

brms_SummaryTable(Pdgfr_Prop_Striatal_Fit1,
  formatOptions = list(digits = 1, nsmall = 2),
  round = 2,
  astrology = FALSE,
  hype = FALSE,
  panderize = TRUE,
  justify = NULL,
  seed = 8807)
```

