---
title-block-banner: true
title: "Analysis of CD31 and ColIV expression in the cortex of PDGFR-β^KLF4-KO mice"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    degrees:
      - PhD
    affiliation: 
      - name: Univerisity Laval 
        department: Psychiatry and Neuroscience
        group: Laboratory of neurovascular interactions 
note: "GitHub: https://daniel-manrique.github.io/"
keywords: 
  - CD31
  - Collagen-IV (ColIV)
  - Brain injury
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
    
csl: science.csl
bibliography: references.bib
---

# Preview

In this notebook, we analyze the expression of CD31 and collagen-IV (ColIV) in the cortex of KLF4-KO animals following cerebral ischemia.The experimental group was treated with tamoxifen between 4-7 DPI to deplete KLF4 specifically in PDGFR-β+ cells. The brains were harvested at 14 DPI. 

**Parent dataset:** CD31, ColIV and IBA1 stained ischemic cortex (ROI) imaged at 10x. Samples were taken 14 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_10x_ROIs_KO_CD31-ColIV-Iba1.zip`. 

**Working dataset**: The `Data_Raw/Widefield_10x_ROIs_CD31-ColIV/` folder containing the raw output from CellProfiler [@stirling2021]. The CellProfiler pipeline used to perform the KLF4+ cell detection is available at OSF (https://osf.io/d45n3).

We perform scientific inference based on the labeled area for CD31 and ColIV.

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","data.table", "dplyr", "easystats", "ggplot","gtsummary", "modelbased", "modelr", "modelsummary", "patchwork", "poorman","plyr","scales", "tidybayes", "tidyverse"))


library(bayesplot)
library(bayestestR)
library(brms)
library(data.table)
library(dplyr)
library(easystats)
library(emmeans)
library(ggplot2)
library(gtsummary)
library(modelbased)
library(modelr)
library(modelsummary)
library(patchwork)
library(poorman)
library(plyr)
library(scales)
library(tidybayes)
library(tidyverse)
```

# Visual themes

We create a visual theme to use in our plots (ggplots).

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Analysis of CD31 area

## Load and handle the datasets

We load the `Data_Raw/Widefield_10x_ROIs_CD31-ColIV_CD31_Merged.csv` file containing area measurements for all the detected objects in CellProfiler.

```{r}
#| label: tbl-CD31_Table
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

# We load the dataset in case is not present in the R environment
CD31_Cells <- read.csv(file = "Data_Raw/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31-ColIV_CD31_Merged.csv", header = TRUE)

gt::gt(CD31_Cells[1:10,])
```

From the KLF4 table, we are interested in the `FileName_CD31_Raw`column containing the identification data for the images, and `AreaShape_Area` depicting the area for each object. We handle the data set to select the columns of interest and make a per MouseID.

```{r}
#| label: tbl-CD31_Handle
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

## We subset the relevant columns (cell number)
CD31_Data <- subset(CD31_Cells, select = c("FileName_CD31_Raw", "AreaShape_Area"))

## And extract metadata from the image name
CD31_Data  <- cbind(CD31_Data, do.call(rbind , strsplit(CD31_Data$FileName_CD31_Raw, "[_\\.]"))[,1:3])

CD31_Data <- subset(CD31_Data, select = -c(FileName_CD31_Raw))

## We Rename the relevant columns 
colnames(CD31_Data) <- c("CD31_Area", "MouseID", "DPI", "Genotype")

## We set the factors
CD31_Data$DPI <- factor(CD31_Data$DPI, levels = c("0D", "14D"))
CD31_Data$Genotype <- factor(CD31_Data$Genotype, levels = c("WT", "KO"))


# Summarize the dataset
setDT(CD31_Data)
CD31_Summary <- CD31_Data[, .(Sum_CD31_Area = sum(CD31_Area, na.rm = TRUE)), by = .(MouseID, DPI, Genotype)]

# Divide by 100 to reduce the number
CD31_Summary$Sum_CD31_Area <- round(CD31_Summary$Sum_CD31_Area/100, digits = 0)


write.csv(CD31_Summary , "Data_Processed/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31_Area.csv", row.names = FALSE)

gt::gt(CD31_Summary [1:10,])

```

With the data handled, we perform exploratory data visualization.

## Exploratory data visualization

We visualize the data to observe the distribution CD31 area.

```{r}
#| label: fig-CD31_Area_Expl
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for CD31 area
#| fig-width: 5
#| fig-height: 4

# Load the data set in case is not present in the environment

CD31_Summary <- read.csv("Data_Processed/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31_Area.csv", header = TRUE)
CD31_Summary$DPI <- factor(CD31_Summary $DPI, levels = c("0D", "14D"))
CD31_Summary$Genotype <- factor(CD31_Summary $Genotype, levels = c("WT", "KO"))

set.seed(8807)

# Boxplot
##################
cols <- hue_pal()(2)

CD31_Area_box <- 
  ggplot(
    data  = CD31_Summary, 
    aes(x = DPI, 
        y = Sum_CD31_Area,
        color = Genotype)
    ) +
  geom_boxplot() +
  geom_jitter() +

scale_y_continuous(name = "CD31 area (AU/pixels)") +
scale_x_discrete(
  name   ="DPI",
  breaks = c("0D", "14D")
  ) +
scale_color_manual(values = rev(cols)) +
Plot_theme +
theme(legend.position = c(0.2, 0.8))

#Plot the result
CD31_Area_box
```

@fig-CD31_Area_Expl shows that CD31 increases following injury. Remarkably at 14 DPI, KO animals exhibit higher variability than WT in CD31 stained area. 

## Statistical modeling for CD31 stained area

We'll fit two different statistical models. 

- **Klf4-KO_Int_Mdl1:** This is an only-intercept model that help to estimate a reference value for the analysis between Genotypes at 14 DPI. This model takes the following notation:

$$
Y_i \sim t(\nu, \mu, \sigma^2) \\ 
\mu = \beta_0
$$
$Y_i$ denotes the observed values of Intensity. $t(\nu, \mu, \sigma^2)$ indicates that the response variable follows a Student-t distribution with degrees of freedom $ν$, location parameter $μ$, and scale parameter $\sigma^2$. $\beta_0$ represents the intercept, which is the estimated mean level of Intensity when no other predictors are included in the model. The model takes the following priors based on our previous results using our transgenic TdTomato mice:

$$
\begin{align}
\beta_{0} \sim Normal(5000,2000) \\
\sigma \sim Student-t(3, 0, 600), \sigma > 0 \\
\end{align}
$$


$$
Y_i \sim t(\nu, \mu_{i}, \sigma_{i}^2) \\
\mu_i = \beta_0 + \beta_{\text{Genotype}[i]} \\
\log(\sigma_i) = \gamma_0 + \gamma_{\text{Genotype}[i]}
$$
In this model: $Y_i$ represents the observed Intensity values.$t(\nu, \mu_{i}, \sigma_{i}^2)$
signifies that the response variable, Intensity, follows a Student-t distribution with degrees of freedom $ν$, location parameter $μ_i$, and scale parameter $\sigma_{i}^2)$ for each observation $i$.$\mu_i$ denotes the mean of Intensity for each Genotype, with $\beta_0$   being the mean at the base value and $\beta_{\text{Genotype}[i]}$ representing the effect of KO. $\sigma_{i}$ denotes the scale parameter for each Genotype, with $γ0$ as the overall scale and $\gamma_{\text{Genotype}[i]}$ reflecting the effect of each Genotype on the variability of Intensity.

This model uses priors based on the regression for 0D:

$$
\begin{align}
\beta_{0} \sim Normal(8000,1000) \\
\beta_{1}\sim Student-t(3, 0, 1000), \sigma > 0 \\
\sigma \sim Student-t(3, 0, 1000), \sigma > 0
\end{align}
$$

### Fit the models

We employ `brms` to fit the model.

```{r}
#| label: CD31_Area_Model
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Model 1:Intercept-only model

CD31_Area_0D <- CD31_Summary[CD31_Summary$DPI =="0D",]

CD31_Area_Mdl1 <- bf(Sum_CD31_Area ~ 1)

get_prior(CD31_Area_Mdl1, CD31_Area_0D, family = student)

# Fit model 1
CD31_Area_Fit1 <- 
  brm(
    family = student,
    data    = CD31KO_Area_0D,
    formula = CD31KO_Area_Mdl1,
    #prior   = CD31KO_Int_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31-ColIV_CD31_Fit1.rds",
    file_refit = "never")

# Add loo for model comparison
CD31_Area_Fit1 <- 
  add_criterion(CD31_Area_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2: Genotype as predictor

CD31_Area_14D <- CD31_Summary[CD31_Summary$DPI =="14D",]

CD31_Area_Mdl2 <- bf(Sum_CD31_Area ~ Genotype,
                      sigma ~ Genotype)

get_prior(CD31_Area_Mdl2, CD31_Area_14D, family = student)

CD31_Area_Prior1 <- 
  c(prior(normal(3000,1000), class = Intercept, lb= 0),
    prior(student_t(3, 0, 250), class = b, dpar = sigma))

# Fit model 1
CD31_Area_Fit2 <- 
  brm(
    family = student,
    data    = CD31_Area_14D,
    formula = CD31_Area_Mdl2,
    prior   = CD31_Area_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31-ColIV_CD31_Fit2.rds",
    file_refit = "never")

# Add loo for model comparison
CD31_Area_Fit2 <- 
  add_criterion(CD31_Area_Fit2, c("loo", "waic", "bayes_R2"))
```
### Model diagnostics

To evaluate sample predictions, we perform the model diagnostics for model 2 using the `pp_check` (posterior predictive checks) function from `brms`. In the graph, 𝘺 shows the data and y\~ the simulated data.

```{r}
#| label: fig-CD31_Area_Diagnostics
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model diagnostics for CD31 stained area expression
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

CD31_Area_Fit2_pp <- 
  brms::pp_check(CD31_Area_Fit2, 
                 ndraws = 100) +
  labs(title = "Posterior predictive checks",
  subtitle = "Formula: Area ~ Genotype") +
  #scale_x_continuous(limits=c(0, 10000)) +
  Plot_theme  

CD31_Area_Fit2_pp
```

We do not see meaningful deviations from the observed data.


### Model results

After validating the model, we plot the full posterior distribution for our second model. First, we visualize the values by Genotypes for the CD31 area and sigma

```{r}
#| label: fig-Klf4-KO_Int_Posterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior distribution for CD31 stained area
#| fig-width: 10
#| fig-height: 4


# For CD31 area
grid = CD31_Area_14D %>%
  data_grid(Genotype)

means = grid %>%
  add_epred_draws(CD31_Area_Fit2)

preds = grid %>%
  add_predicted_draws(CD31_Area_Fit2)

CD31_Area_fig <- CD31_Area_14D %>%
  ggplot(aes(x = Sum_CD31_Area, y = Genotype)) +
  stat_halfeye(aes(x = .epred), scale = 0.6, position = position_nudge(y = 0.175), data = means) +
  stat_interval(aes(x = .prediction), data = preds) +
  geom_point(data = CD31_Area_14D) +
  scale_x_continuous(name = "CD31 area (pixels)",
                     limits = c(2000, 7000),
                      breaks = seq(2000, 7000, 2000) ) +

  scale_color_brewer() +
    Plot_theme +
  theme (legend.position = c(0.8, 0.3))

ggsave(
  plot     = CD31_Area_fig, 
  filename = "Plots/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31-ColIV_CD31_Area.png", 
  width    = 8, 
  height   = 8, 
  units    = "cm")



# For sigma
CD31_Area_sigma <- grid %>%
  add_epred_draws(CD31_Area_Fit2, dpar = TRUE) %>%
  ggplot(aes(x = sigma, y = Genotype)) +
  stat_halfeye() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous(name = "Sigma",
                     limits = c(0, 2500),
                      breaks = seq(0, 2500, 700) ) +

  Plot_theme 
 
ggsave(
  plot     = CD31_Area_sigma, 
  filename = "Plots/Widefield_10x_ROIs_CD31-ColIV/Widefield_10x_ROIs_CD31-ColIV_CD31_Sigma.png", 
  width    = 8, 
  height   = 8, 
  units    = "cm")
  
CD31_Area_fig + CD31_Area_sigma
```

@fig-Klf4-KO_Int_Posterior shows there is no difference in the spatial intensity between KO and WT animals. 


```{r}





set.seed(8807)

Klf4KO_Int_Contrast <- Klf4KO_Int_Fit2 %>%
   spread_draws(b_GenotypeKO) %>%
   mutate(Genotype_contrast = b_GenotypeKO) %>%
   ggplot(aes(x = Genotype_contrast, fill = after_stat(abs(x) < 630))) +
   stat_halfeye() +
  geom_vline(xintercept = c(-630, 630), linetype = "dashed") +
  scale_fill_manual(
    name="ROPE", 
    values = c("gray80", "skyblue"),
    labels = c("False", "True")) +
  scale_y_continuous(name = "Probability density") +
  scale_x_continuous(name = "CD31 area (pixels)",
                     limits = c(2000, 7000),
                      breaks = seq(2000, 7000, 2000) ) +

  Plot_theme +
  theme (legend.position = c(0.8, 0.8))

ggsave(
  plot     = Klf4KO_Int_Contrast , 
  filename = "Plots/Widefield_10x_Ipsilateral_KO_Klf4_Exp/Widefield_10x_Ipsilateral_KO_Klf4_Intensity.png", 
  width    = 7, 
  height   = 7, 
  units    = "cm")

Klf4KO_Int_Contrast 
```





On the other hand, we can also plot the posterior distribution for the sigma parameter:

```{r}
#| label: fig-Klf4-KO_Int_PosteriorSigma
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior distribution for Klf4 expression (sigma)
#| fig-width: 5
#| fig-height: 4

Klf4KO_Sigma_Contrast <- Klf4KO_Int_Fit2 %>%
   spread_draws(b_sigma_GenotypeKO) %>%
   mutate(Sigma_contrast =b_sigma_GenotypeKO) %>%
  ggplot(aes(x = Sigma_contrast)) +
   stat_halfeye() +
  scale_y_continuous(name = "Probability density") +
  scale_x_continuous(name = "Sigma (KO-WT)",
                     limits = c(-3, 2),
                      breaks = seq(-3, 2, 1) ) +
  Plot_theme

ggsave(
  plot     = Klf4KO_Sigma_Contrast, 
  filename = "Plots/Widefield_10x_Ipsilateral_KO_Klf4_Exp/Widefield_10x_Ipsilateral_KO_Klf4_Sigma.png", 
  width    = 7, 
  height   = 7, 
  units    = "cm")

Klf4KO_Sigma_Contrast 
```

We observe that the uncertainty (sigma in the log scale) for both groups have an overlap, but most of the probability function falls bellow 0, indicating that less uncertainty for KO mice. 

### Posterior summary

Next, we plot the posterior summary using the `describe_posterior` function from `bayestestR` package [@bayestestR; @makowski2019].

```{r}
#| label: Klf4KO_Int_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Klf4KO_Int_Fit2,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")

modelsummary(Klf4KO_Int_Fit2, 
             shape = term ~ model + statistic,
             centrali2ty = "mean", 
             title = "Spatial intensity of KLF4 in the ipsilateral hemisphere",
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "Tables/html/Widefield_10x_Ipsilateral_KO_Klf4_SpatialInt_Fit2_Table.html",
             )

Klf4KO_Int_Fit2_Table <- modelsummary(Klf4KO_Int_Fit2, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Klf4KO_Int_Fit2_Table, filename = "Tables/tex/Widefield_10x_Ipsilateral_KO_Klf4_SpatialInt_Fit2_Table.tex")
```
The table displays the effect of KOLF-KO in the spatial intensity of KLF4 and its respective uncertainty. We can appreciate there is not evidence of difference between genotypes (248, CI95% = -805 - 139). 

# References

::: {#refs}
:::

```{r}
sessionInfo()
```

