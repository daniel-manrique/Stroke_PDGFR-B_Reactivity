---
title: "Untitled"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("flowCore")
BiocManager::install("flowWorkspace")
BiocManager::install("openCyto")
BiocManager::install("flowAI")
BiocManager::install("ggcyto")
BiocManager::install("CytoML")

install.packages()
```


```{r}
library(flowCore)
library(CytoML)
library(flowAI)
library(flowWorkspace)
library(ggcyto)
library(tidyverse)
library(CytoExploreR)
library(openCyto)
library(CytoExploreRData)
library(knitr)
library(kableExtra)
library(dplyr)
```


```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```


```{r}

fs <- read.flowSet(path = "Data_Raw/FlowCitometry_Pdgfrb/", pattern = ".fcs", truncate_max_range.names = TRUE)
fs[1]
colnames(fs)

colnames(fs)
```

# Compensation

```{r}

spillover <- (fs[[11]])

fs_comp <- compensate(fs, spillover (fs[[11]])$SPILL)
fs_comp[[1]]@parameters@data


```
## Quality check

```{r}
flow_auto_qc(fs_comp)
```

# Transfor flow cytometry data

```{r}

fs_comp [[11]]@parameters@data

fs_transformation <- estimateLogicle(fs_comp[[11]], colnames(fs_comp[[1]][, 7:8]))
fs_comp_clean <- transform(fs_comp, fs_transformation)
fs_comp_clean[[1]]@parameters@data
```

## Visualize the results using ggCyto

```{r}
autoplot(fs_comp_clean[[5]])

# Extract data from the flowSet for plotting
plot_data <- lapply(sampleNames(fs_comp_clean), function(sample) {
  data <- exprs(fs_comp_clean[[sample]])
  data <- as.data.frame(data)
  data$Sample <- sample
  return(data)
})

plot_data <- do.call(rbind, plot_data)

# Create the plot using ggplot2
ggplot(plot_data, aes(x = `FSC-A`, y = `SSC-A`)) +
  geom_bin2d(bins = 256) +
  facet_wrap(~ Sample)

```
## Gating


### singlet gating

```{r}
gs <- GatingSet(fs_comp_clean)

g.singlets <- polygonGate(filterId = "Singlets","FSC-A"=c(1e4,25e4,25e4,2e4),"FSC-H"=c(0e4,12e4,18e4,6e4)) 

# define gate
ggcyto(gs[[1]],aes(x="FSC-A",y="FSC-H"),subset="root") +

geom_hex(bins = 200)+
  
  geom_gate(g.singlets)+ggcyto_par_set(limits = "instrument") +
  Plot_theme

add(gs,g.singlets) # add gate to GatingSet
recompute(gs) 



ggcyto(gs[[1]],aes(x="FSC-A",y="SSC-A"),subset="Singlets")+
  geom_hex(bins = 200)+
  ggcyto_par_set(limits = "instrument")+
  Plot_theme
```
```{r}
ggcyto(gs,aes(x="FSC-A",y="FSC-H"),subset="root")+
  geom_hex(bins = 100)+
  geom_gate("Singlets")+
  geom_stats(adjust = 0.8)+
  ggcyto_par_set(limits = "instrument")+
  facet_wrap(~name,ncol = 3) +
  Plot_theme
```
### Set pdgfrb gate

```{r}
g.pdgfrb <- polygonGate(filterId = "Pdgfrb","SSC-A"=c(0,0,2.7e5,2.7e5),"Yellow Green E 582/15-A"=c(2,4.5,4.5,2)) # define gate
ggcyto(gs[[1]],aes(x="Yellow Green E 582/15-A",y= "SSC-A"),subset="Singlets")+
  geom_hex(bins = 150)+
  geom_density2d(colour = "black") +
  geom_gate(g.pdgfrb)+
  ggcyto_par_set(limits = "instrument") +
  Plot_theme
```

```{r}
add(gs,g.pdgfrb,parent="Singlets") # add gate to GatingSet
recompute(gs) # recompute GatingSet
```
```{r}
ggcyto(gs,aes(x="Yellow Green E 582/15-A",y="SSC-A"),subset="Singlets")+
  geom_hex(bins = 100)+
  geom_gate("Pdgfrb")+
  geom_stats(adjust = 0.8)+ggcyto_par_set(limits = "instrument")+
  facet_wrap(~name,ncol = 3) +
  Plot_theme
```
## GATE DEATH CELLS

```{r}
g.dead <- polygonGate(filterId = "Dead","SSC-A"=c(0,0,2.7e5,2.7e5),"Red A 780/60 755 LP-A"=c(2,4.5,4.5,2)) # define gate
ggcyto(gs[[5]],aes(x="Red A 780/60 755 LP-A",y= "SSC-A"),subset="Pdgfrb")+
  geom_hex(bins = 150)+
  geom_gate(g.dead)+
  ggcyto_par_set(limits = "instrument") +
  Plot_theme
```
```{r}
add(gs,g.dead,parent="Pdgfrb") # add gate to GatingSet
recompute(gs) # recalculate Gatingset
```

```{r}
ps <- gs_pop_get_count_with_meta(gs)
ps <- ps %>% mutate(percent_of_parent=Count/ParentCount)
ps %>% select(sampleName,name,Population,Count,ParentCount,percent_of_parent) %>% head() %>% kable
```

