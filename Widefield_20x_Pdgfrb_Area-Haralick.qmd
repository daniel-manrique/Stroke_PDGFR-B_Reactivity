---
title-block-banner: true
title: "Analysis of Area and Haralick features for PDGFR-β"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    affiliation: Univerisity Laval (Laboratory of neurovascular interactions) 
keywords: 
  - PDGFR-β
  - Haralick features
  - Brain injury
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
    
csl: science.csl
bibliography: References.bib
---


# Preview

This notebook reports the analysis of the area and Haralick features for PDGFR-β in defined ROIs of the ipsilateral hemisphere.

**Parent dataset:** PDGFR-β (td-tomato) Z-plane ROIs imaged at 20x. Images were mas intensity projected to obtain a single plane image. The images are grouped at 0, 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_10x_Ipsilateral_Pdgfra-Pdgfrb.zip`.

**Working dataset**: The `Data_Raw/Widefield_20x_ROIs_Pdgfrb_Cells/Image.csv`contains the quantification of the area covered by the detected cells after processing using CellProfiller. The pipeline is available at https://osf.io/k9zbe.

PUT DESCRIPTION FOR HARALICK FEATURES

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
#library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","dplyr", "easystats", "ggplot","modelbased", "modelr", "patchwork", "poorman","plyr", "spatstat", "tidybayes", "tidyverse", "viridis"))


library(bayesplot)
library(bayestestR)
library(brms)
library(dplyr)
library(easystats)
library(emmeans)
library(ggplot2)
library(modelbased)
library(modelr)
library(patchwork)
library(poorman)
library(plyr)
library(spatstat)
library(tidybayes)
library(tidyverse)
library(viridis)
```

# Visual themes

We create a visual theme to use in our plots (ggplots).

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```


# Analysis of area covered by PDGFR-β+ cells


## Load and handle the datasets

We load the `Data_Raw/Widefield_20x_ROIs_Pdgfrb_Cells/Image.csv` dataset containing the total objects area exported by CellProfiller.

```{r}
#| label: tbl-Pdgfrb_Table
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

# We load the dataset in case is not present in the R environment
Pdgfrb_Area <- read.csv(file = "Data_Raw/Widefield_20x_ROIs_Pdgfrb_Cells/Image.csv", header = TRUE)

knitr::kable(Pdgfrb_Area [1:10, ])
```

From the table, we are interested in the `AreaOccupied_AreaOccupied_Cells`and the `FileName_Raw`columns containing the measured area and metadata information from the image names. Next, we subset the dataset to select the columns of interest and give them meaningful names. Please note that to facilitate the reading of results, we downscale the pixel area count by thousand.  

When performing pre-processing, we noticed that the CellProfiller pipeline yielded 0 cell count for three images because an unknown error. We exclude this images with biased counts. 

```{r}
#| label: tbl-Pdgfrb_Handle
#| include: true
#| warning: false
#| message: false
#| tbl-cap: "Data set"

## We subset the relevant columns (cell number)
Pdgfrb_Area <- subset(Pdgfrb_Area, select = c("FileName_Raw", "AreaOccupied_AreaOccupied_Cells"))

## And extract metadata from the image name
Pdgfrb_Area  <- cbind(Pdgfrb_Area, do.call(rbind , strsplit(Pdgfrb_Area$FileName_Raw, "[_\\.]"))[,1:5])

Pdgfrb_Area <- subset(Pdgfrb_Area, select = -c(FileName_Raw))

## We Rename the relevant columns 
colnames(Pdgfrb_Area) <- c("Area", "MouseID", "DPI", "Condition", "Lesion", "Region")

# Setting factors
Pdgfrb_Area$DPI <- factor(Pdgfrb_Area$DPI, levels = c("0D", "3D", "7D", "14D", "30D"))

Pdgfrb_Area$Region <- factor(Pdgfrb_Area$Region, levels = c("Peri", "Str", "Ctx"), ordered = TRUE)

Pdgfrb_Area$Condition <- factor(Pdgfrb_Area$Condition, levels = c("SHAM", "MCAO"))

Pdgfrb_Area$Lesion <- factor(Pdgfrb_Area$Lesion, levels = c("L0", "L1", "L2"))

# Create an additional DPI variable (numeric)

DPI_mapping <- c("0D" = "0", "3D" = "3", "7D" = "7", "14D" = "14", "30D" = "30")
Pdgfrb_Area$DPI_cont <- as.numeric(DPI_mapping[as.character(Pdgfrb_Area$DPI)])

## To facilitate reading
Pdgfrb_Area$Area <- Pdgfrb_Area$Area/1000

# Exclued error-derived 0 counts
Pdgfrb_Area <- filter(Pdgfrb_Area, Area != "0")

write.csv(Pdgfrb_Area, "Data_Processed/Widefield_20x_ROIs_Pdgfrb_Area.csv", row.names = FALSE)

knitr::kable(Pdgfrb_Area [1:10, ])
```

Next, we perform exploratory data visualization.

### Exploratory data visualization

We visualize the number of parenchymal PDGFR-β+ cells in the injured cortex.

```{r}
#| label: fig-Pdgfrb_Exploratory
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Exploratory data visualization for PDGFR-β area
#| fig-width: 5
#| fig-height: 4

set.seed(8807)

Pdgfrb_Area_EDV <- 
  ggplot(
    data  = Pdgfrb_Area, 
    aes(x = DPI_cont, 
        y = Area)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("Number of parenchymal PDGFR-β cells")) +
  scale_x_continuous(name="Days post-ischemia (DPI) ",
                     breaks=c(0, 3, 7,14,30)) +
  Plot_theme +
  facet_wrap(~ Region)

Pdgfrb_Area_EDV
```

@fig-Pdgfrb_Exploratory shows the distribution of area per DPI and regions. As expected, the cortical regions present the most prominent increase in area. The differences in the fit show little variation for linear and non linear models.Given that our objective is to capture the main differences in the trends between regions we will develop a linear model.  


# Statistical modeling for PDGFR-β area

We use the `brms` package [@brms; @brms-2] to run Bayesian modeling. We employ weakly informative priors in all the cases to optimize the Markov chain Monte Carlo (MCMC) and the exploration of the parameter space. We fit the following model with a student_t distribution:

-   **Pdgfrb_Area_Mdl1:** We use `DPI` and Region as a linear predictors for PDGFR-β Area. The model takes the following notation:

$$
Area = \beta_{0} + \beta_{1} * DPI + \beta_{2} * Region + \beta_{3} * DPI * Region + \epsilon_{i}
$$

This model uses the following weakly informative priors:

$$
\begin{align}
\beta_{1} \sim Normal(0, 100) \\
\alpha \sim Student-t(3, 150, 50) \\
\sigma \sim Student-t(3, 0, 100), \sigma > 0 \\
\end{align}
$$

## Fit the models for PDGFR-β area

```{r}
#| label: Pdgfrb_Area_Fit
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Model 1: DPI and Region as a linear predictors
###########################################
Pdgfrb_Area_Mdl1 <- bf(Area ~ DPI_cont * Region)

get_prior(Pdgfrb_Area_Mdl1, Pdgfrb_Area)

Pdgfrb_Area_Prior1 <- 
  c(prior(normal(0,100), class = b),
    prior(student_t(3, 150,50), class = Intercept, lb= 0),
    prior(student_t(3, 0, 100), class = sigma, lb=0))

# Fit model 1
Pdgfrb_Area_Fit1 <- 
  brm(
    family  = student,  
    data    = Pdgfrb_Area,
    formula = Pdgfrb_Area_Mdl1,
    prior   = Pdgfrb_Area_Prior1,
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Pdgfrb_AreaHaralick/Pdgfrb_Area_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfrb_Area_Fit1 <- 
  add_criterion(Pdgfrb_Area_Fit1, c("loo", "waic", "bayes_R2"))
```
## Model diagnostics

To evaluate sample predictions, we perform the diagnostics for the fitted model using the `pp_check` (posterior predictive checks) function from `brms`. In the graph, 𝘺 shows the data and y\~ the simulated data.

```{r}
#| label: fig-Pdgfrb_Area_Diagnostics
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Model diagnostics for PDGFR-β area
#| fig-height: 4
#| fig-width: 5

set.seed(8807)

color_scheme_set("darkgray")

# Model 4
Pdgfrb_Area_Mdl1_pp <- 
  brms::pp_check(Pdgfrb_Area_Fit1, 
                 ndraws = 100) +
  labs(title = "Posterior predictive checks (model 4)",
  subtitle = "Formula: Area ~ DPI * Region") +
  scale_x_continuous(limits=c(-200, 1000)) +
  Plot_theme 

Pdgfrb_Area_Mdl1_pp
```

@fig-PdgfrbIntDen_Diagnostics shows that the model predictions do not deviate substantially from the data. We can explore further the model using `shinystan`:

```{r}
#| label: PdgfrbIntDen_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false

#launch_shinystan(Pdgfrb_Area_Fit1)
```

# Model results

### Visualizing the results

We visualize the results using the `conditional_effects` function form `brms`.

```{r}
#| label: fig-Pdgfrb_Area_CondEff
#| include: true
#| warning: false
#| message: false
#| results: false
#| fig-cap: Posterior for PDGFR-𝛽 area
#| fig-width: 9
#| fig-height: 4

set.seed(8807)


# We create the graph for convex hull
Pdgfrb_Area_DPI <- 
  conditional_effects(Pdgfrb_Area_Fit1)

Pdgfrb_Area_DPI <- plot(Pdgfrb_Area_DPI, 
       plot = FALSE)[[3]]

Pdgfrb_Area_fig <- Pdgfrb_Area_DPI  + 
  scale_y_continuous(name = expression ("PDGFR-β area (pixels)")) +
  scale_x_continuous(name="DPI"                   ,
                     breaks = c(0, 3, 7, 14, 30),
                     labels = c("0", "3", "7", "14", "30")) +
  
  geom_point(data=Pdgfrb_Area, 
               aes(y = Area, 
                   x = DPI_cont, colour=Region),
             inherit.aes=FALSE, 
             alpha=0.5,
             size = 1,
             position=position_jitter(h=0, w=0.07)) +    
  
  scale_color_manual(
    values = c("#0048BA", "red", "darkgreen"),
    labels = c("Perilesion", "Striatum", "Cortex"),
    name="Region"
    ) +
  scale_fill_manual(
    values = c("#0048BA", "red", "darkgreen"),
    labels = c("Perilesion", "Striatum", "Cortex"),
    name="Region"
    ) +

  Plot_theme +
  theme(legend.position = c(0.4, 1), 
        legend.direction = "horizontal")

ggsave(
  plot     = Pdgfrb_Area_fig, 
  filename = "Plots/Widefield_20x_ROIs_Pdgfrb_Area-Haralick/Pdgfrb_Area_fig.png", 
  width    = 10, 
  height   = 9, 
  units    = "cm")

Pdgfrb_Area_fig
```
@fig-Pdgfrb_Area_CondEff shows the fit for PDGFR-β area. We can visualize an increasing trend, specially for cortex. 

## Posterior summary

We plot the posterior summary using the `describe_posterior` function from `bayestestR` package [@bayestestR; @makowski2019].

```{r}
#| label: Pdgfrb_Area_DescribePosterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Pdgfrb_Area_Fit1,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")
```

With this summary we can visualize estimates and the uncertainty for each parameter. Specifically, we can observe a difference of 14.7 (CI95% 12.6 - 16.6) for the slope of cortex, denoting a marked difference compared to perilesion and striatum.

# Analysis of Haralick features (Texture analysis)




