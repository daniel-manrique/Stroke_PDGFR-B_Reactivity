---
title-block-banner: true
title: "Point pattern analysis (PPA) of PDGFR-β and GFAP (widefield 5x)"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    affiliation: Univerisity Laval (Laboratory of neurovascular interactions) 
keywords: 
  - Point patterns analysis
  - Cell covariance
  - Brain injury
  - Bayesian modeling 
  
license: "CC BY"
format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab
knitr:
  opts_chunk: 
    
    warning: false
    message: false
csl: science.csl
bibliography: Widefield_5x_Pdgfrb-Gfap_PPA.bib
editor: 
  markdown: 
    wrap: sentence
---

# Preview

In this notebook we analyse point patterns generated from PDGFR-β and GFAP cells.
We performed automatic cell detection and classification using QuPath [@bankhead2017], and created point patterns the R-package `spatstat`[@baddeley2005; @spatstat]. The point patterns were saved as `.rds` object files.

**Parent dataset:** PDGFR-β and GFAP-stained ischemic hemispheres imaged at 5x (with stitching). Samples are grouped at 0 (Sham), 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_5x_Ipsilateral_Gfap-Pdgfrb.zip`. Individual cells were detected and classified into PDGFR-β^low^ (Pdgfrb_NonReact) and PDGFR-β^high^ (Pdgfrb_React) using QuPath [@bankhead2017].The complete QuPath project, including classifiers and output data as .tsv files is available at https://osf.io/8ehyu.

**Working dataset:** PDGFR-β and GFAP point patterns derived from ischemic hemispheres and saved as a hyperframe .rds R-object.

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages(c("ggplot2", "spatstat")

library(ggplot2)
library(spatstat)
```

# Visual themes

We create a visual theme to use in our plots (ggplots).

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Load the dataset

The main objective of this notebook is to analyze the covariance between PDGFR-β and GFAP cells using function from the `spatstat` package [@spatstat; @baddeley2005].
First, we load the point patterns:

```{r}
#| label: PPP_Pdgfrb_Gfap_Load 
#| include: true
#| warning: false
#| message: false
#| results: false


PointPatterns <- readRDS("PointPatterns/Widefield_5x_Ipsilateral_Pdgfr-Gfap_PointPatterns.rds")

# We assign the animal ID to row names
PointPatterns <- `row.names<-.hyperframe`(PointPatterns, PointPatterns$ID)

PointPatterns
```

The hyperframe contain the following columns:

-   **"blank" (RowID):** This is a column with no name which contains the rows IDs, labeled as the unique animal ID.

-   **Pdgfr_High:** Point patterns for PDGFR-β_high (reactive) cells.

-   **Pdgfr_Low:** Point patterns for PDGFR-β_low (non-reactive) cells.

-   **Gfap:** Point patterns for GFAP+ cells.

-   **ID:** Unique animal ID

-   **DPI:** Days post ischemia (0, 3, 7, 14 or 30 days)

-   **Condition:** It states whether the animal was submitted to cerebral ischemia (MCAO) or to sham surgery.

# Create density kernels

First, we calculate density kernels and add them to the hyperframe. A density kernel is a method to estimate the probability density function of a variable. For spatial point patterns, this provides a smooth estimate of the intensity function that generated the observed data. With this approach we visualize and analyze the underlying spatial structure.

Therefore, given a set of points (cells) in a observation window, the kernel density estimator assigns a smooth surface over the region where the value at any given point is a sum of contributions from all data points. This entails that each data point contributes to the density estimate in a way that is determined by the kernel function. The height of the peak at each data point and its spread are controlled by a bandwidth parameter that creates a surface where the peaks represent regions of high point concentration [@baddeley2015].

The kernel density estimation for point patterns can be formulated as follows:

$$
\hat{\lambda}(u) = \frac{1}{n}\sum_{i=1}^{n} K_h(u - x_i)
$$ {#eq-DensityKernel}

Where:

-   $\hat{\lambda}(u)$ is the estimated intensity function at location $u$.

-   $n$ is the number of points.

-   $x_i$ is the location of the $i$-th point.

-   $K_h(u - x_i)$ is the kernel function scaled by the bandwidth $h$.

We perform this calculation using the `density` function from `spatstat`. We judged a sigma (bandwidth) of 0.2 offers a fair readout for the point pattern density. We perform the same procedure for PDGFR-β^low^, PDGFR-β^high^ and GFAP.

```{r}
#| label: PPP_Pdgfrb_Density
#| include: true
#| warning: false
#| message: false

PointPatterns$Pdgfr_Low_Density <- with (PointPatterns, density(Pdgfr_Low, sigma = 0.2))

PointPatterns$Pdgfr_High_Density <- with (PointPatterns, density(Pdgfr_High, sigma = 0.2))

PointPatterns$Gfap_Density <- with (PointPatterns, density(Gfap, sigma = 0.2))
```

# Plot density kernels

We use the default R plotting functions to visualize examples of the generated density kernels for PDGFR-β^low^ and PDGFR-β^high^.

```{r}
#| label: fig-PPP_Pdgfrb_DensityPlots
#| include: true
#| warning: false
#| message: false
#| fig-cap: Example density kernels for PDGFR-β^low^ and PDGFR-β^high^
#| fig-height: 5
#| fig-width: 9

Pdgfr_Low_Colmap <- colourmap(topo.colors(256), range = c(0, 60))
Pdgfr_High_Colmap <- colourmap(topo.colors(256), range = c(0, 600))

par(mfrow = c(2,5), mar=c(1,1,1,1), oma=c(1,1,1,1))

## For PDGFR_Low
plot(PointPatterns$Pdgfr_Low_Density$Td81, col = Pdgfr_Low_Colmap, main = "Control")
plot(PointPatterns$Pdgfr_Low_Density$Td76, col = Pdgfr_Low_Colmap, main = "3 DPI")  
plot(PointPatterns$Pdgfr_Low_Density$Td16, col = Pdgfr_Low_Colmap, main = "7 DPI") 
plot(PointPatterns$Pdgfr_Low_Density$Td22, col = Pdgfr_Low_Colmap, main = "14 DPI") 
plot(PointPatterns$Pdgfr_Low_Density$Td43, col = Pdgfr_Low_Colmap, main = "30 DPI")  

## For PDGFR_High
plot(PointPatterns$Pdgfr_High_Density$Td81, col = Pdgfr_High_Colmap, main = "")  
plot(PointPatterns$Pdgfr_High_Density$Td76, col = Pdgfr_High_Colmap, main = "")  
plot(PointPatterns$Pdgfr_High_Density$Td16, col = Pdgfr_High_Colmap, main = "") 
plot(PointPatterns$Pdgfr_High_Density$Td22, col = Pdgfr_High_Colmap, main = "")
plot(PointPatterns$Pdgfr_High_Density$Td43, col = Pdgfr_High_Colmap, main = "")  
```

@fig-PPP_Pdgfrb_DensityPlots show in the upper row the PDGFR-β^low^ and at the button PDGFR-β^high^. Please note the dissimilar scales.As we can see, the response of PDGFR-β cells to injury is driven mainly by highly reactive cells. This offer us a ground to further explore this cell subset.

# Calculate relative distribution of PDGFR-β cells to astrocytes

To calculate the relative distribution between PDGFR-β^high^/PDGFR-β^low^ and GFAP, we subset the hyperframe per DPI, given the limited functionality of the `rhohat` function in `spatstat`. Moreover, we exclude Sham animals from this analysis because GFAP staining is lacking in the healthy brain.

```{r}
#| label: PPP_Pdgfrb_Subset
#| include: true
#| warning: false
#| message: false

# We set the factor levels
PointPatterns$DPI <- factor(PointPatterns$DPI , levels = c("3D", "7D", "14D", "30D")) 

# Exclude Sham animals
PointPatterns_Sub <- PointPatterns[PointPatterns$Condition != "SHAM",] 

# Subset the data sets
PointPatterns_3D <- subset(PointPatterns_Sub, DPI=="3D", select = 1:9) 
PointPatterns_7D <- subset(PointPatterns_Sub, DPI=="7D", select = 1:9) 
PointPatterns_14D <- subset(PointPatterns_Sub, DPI=="14D", select = 1:9)
PointPatterns_30D <- subset(PointPatterns_Sub, DPI=="30D", select = 1:9)
```

Next, we calculate the relative distribution of PDGFR-β^high^ and PDGFR-β^low^ cells to astrocytes using the `rhohat` function from `spatstat`.

When using **`rhohat`**, we can estimate the intensity function locally, taking into account the varying density of the surrounding points. In this way, the `rhohat` function provides an intensity estimate that reflects local structures in the data, including hotspots or areas of inhibition. Importantly, this function does not assume an uniform distribution of points across space.

`spatstat` estimates the inhomogeneous intensity function in the following manner:

$$
\hat{\rho}(u) = \frac{1}{n}\sum_{i=1}^{n} K_h(u - x_i) w(x_i)
$$

Where:

-   $\hat{\rho}(u)$ is the estimated inhomogeneous intensity function at location $u$.

-   $n$ is the number of points.

-   $x_i$ is the location of the $i$-th point.

-   $K_h(u - x_i)$ is the kernel function.

-   $w(x_i)$ is the weight function at point $x_i$, adjusting for inhomogeneity.

In our case, we calculate such distribution for PDGFR-β^high^ and PDGFR-β^low^ conditional on the distribution of GFAP (`Gfap_Density`, density kernel of GFAP).
We explicitly utilize `do.CI = FALSE` to pool the estimates by DPI later.

```{r}
#| label: PPP_Pdgfrb_Rhohat
#| include: true
#| warning: false
#| message: false

# For PDGFR-β^high^

## For 3D
Pdgfr_Rhohat_3D_High <- with(PointPatterns_3D, spatstat.explore::rhohat.ppp(Pdgfr_High, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_3D_High  <- pool(Pdgfr_Rhohat_3D_High)

## For 7D
Pdgfr_Rhohat_7D_High  <- with(PointPatterns_7D, spatstat.explore::rhohat.ppp(Pdgfr_High, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_7D_High  <- pool(Pdgfr_Rhohat_7D_High)

## For 14D
Pdgfr_Rhohat_14D_High  <- with(PointPatterns_14D, spatstat.explore::rhohat.ppp(Pdgfr_High, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_14D_High <- pool(Pdgfr_Rhohat_14D_High)

## For 30D
Pdgfr_Rhohat_30D_High  <- with(PointPatterns_30D, spatstat.explore::rhohat.ppp(Pdgfr_High, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_30D_High  <- pool(Pdgfr_Rhohat_30D_High)


# For PDGFR-β^low^

## For 3D
#Pdgfr_Rhohat_3D_Low  <- with(PointPatterns_3D, spatstat.explore::rhohat.ppp(Pdgfr_Low, Gfap_Density, do.CI = FALSE))
#Pdgfr_Rhohat_3D_Low  <- pool(Pdgfr_Rhohat_3D_Low)

## For 7D
Pdgfr_Rhohat_7D_Low  <- with(PointPatterns_7D, spatstat.explore::rhohat.ppp(Pdgfr_Low, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_7D_Low  <- pool(Pdgfr_Rhohat_7D_Low)

## For 14D
Pdgfr_Rhohat_14D_Low  <- with(PointPatterns_14D, spatstat.explore::rhohat.ppp(Pdgfr_Low, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_14D_Low <- pool(Pdgfr_Rhohat_14D_Low)

## For 30D
Pdgfr_Rhohat_30D_Low  <- with(PointPatterns_30D, spatstat.explore::rhohat.ppp(Pdgfr_Low, Gfap_Density, do.CI = FALSE))
Pdgfr_Rhohat_30D_Low  <- pool(Pdgfr_Rhohat_30D_Low)
```

In this chunk, We had an unexpected code error for the calculation of the covariance between PDGFR-β^low^ and GFAP at 3 DPI. All the other calculations were performed successfully.
Next, we save the pooled rhohat plots.

# Plot rhohat to astrocytes

```{r}
#| label: PPP_Pdgfr_RhohatPlot
#| include: true
#| warning: false
#| message: false

# For PDGFR-β^high^

png("Plots/Pdgfrb_Rhohat_3D_High.png", width = 600, height = 400)
par(mar=c(7,9,2,2))
plot(Pdgfr_Rhohat_3D_High, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 35),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 500, 100), 
     labels = c("0", "100", "200", "300", "400", "500"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 35, 10), 
     labels = c("0", "10", "20", "30"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 2, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^high), 
      mgp = c(4.5, 1, 0), 
      cex.lab = 3) 

dev.off()

png("Plots/Pdgfrb_Rhohat_7D_High.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_7D_High, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 180),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 600, 100), 
     labels = c("0", "100", "200", "300", "400", "500", "600"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 180, 40), 
     labels = c("0", "40", "80", "120", "160"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 1, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^high), 
      mgp = c(5, 1, 0), 
      cex.lab = 3) 

dev.off()


png("Plots/Pdgfrb_Rhohat_14D_High.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_14D_High, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 350),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 800, 200), 
     labels = c("0", "200", "400", "600", "800"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 350, 70), 
     labels = c("0", "70", "140", "210", "280", "350"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 2, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^high), 
      mgp = c(5, 1, 0), 
      cex.lab = 3) 

dev.off()

png("Plots/Pdgfrb_Rhohat_30D_High.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_30D_High, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 300),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 400, 100), 
     labels = c("0", "100", "200", "300", "400"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 300, 60), 
     labels = c("0", "60", "120", "180", "240", "300"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 2, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^high),
      mgp = c(5, 1, 0), 
      cex.lab = 3) 

dev.off()


# For PDGFR-β^Low^

png("Plots/Pdgfrb_Rhohat_7D_Low.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_7D_Low, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 50),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 600, 100), 
     labels = c("0", "100", "200", "300", "400", "500", "600"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 50, 10), 
     labels = c("0", "10", "20", "30", "40", "50"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 1, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^Low), 
      mgp = c(5, 1, 0),
      cex.lab = 3) 

dev.off()


png("Plots/Pdgfrb_Rhohat_14D_Low.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_14D_Low, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 50),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 800, 200), 
     labels = c("0", "200", "400", "600", "800"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 50, 10), 
     labels = c("0", "10", "20", "30", "40", "50"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 2, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^Low), 
      mgp = c(5, 1, 0), 
      cex.lab = 3) 

dev.off()


png("Plots/Pdgfrb_Rhohat_30D_Low.png", width = 600, height = 400)
par(mar=c(7,10,2,2))
plot(Pdgfr_Rhohat_30D_Low, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 50),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 400, 100), 
     labels = c("0", "100", "200", "300", "400"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5)
axis(2, at = seq(0, 50, 10), 
     labels = c("0", "10", "20", "30", "40", "50"), 
     cex.axis=2.5, 
     padj = 0.5, 
     lwd.ticks = 5, 
     las = 2)
title(xlab = "GFAP (intensity)", 
      mgp = c(4.5, 2, 0), 
      cex.lab = 3)   
title(ylab = expression("(p)PDGFR-β"^Low), 
      mgp = c(5, 1, 0), 
      cex.lab = 3) 

dev.off()
```

These graphical results show the convariance between PDGFR-B and GFAP.

# Point Process model 

Next, we fit a spatial model for replicated point patterns using the `mppm` function from `spatstat`.The spatial point process modeled by `mppm` assumes that the points follow an inhomogeneous Poisson process with intensity function $\lambda(u)$ that varies over space $u$.For the count of points in any spatial region \$ A\$, we follow a Poisson distribution with the mean determined by the spatial integral of the intensity function $\lambda(u)$:

$$
N(A) \sim \text{Poisson}\left(\int_A \lambda(u) du\right)
$$

where $N(A)$ denotes the number of points in region $A$.

Therefore, the intensity function for the inhomogeneous Poisson process as a function of covariates we are modeling is given by:

$$
λ(u) = \exp(µ + α_{DPI(u)} + \beta Z (u) + γ{DPI(u)}Z(u))
$$

Here, we regress `Pdgfr_High` on nested GFAP density within DPI.The parameter α represents the influence of different DPI, whereas the parameter β account for the effect of a unit increase in GFAP density. The term $γ{DPI(u)}Z(u))$ stipulates the effect of a unit increase in GFAP density depending on DPI.

```{r}
#| label: PPP_Pdgfrb_Mppm
#| include: true
#| warning: false
#| message: false

set.seed(8807)

# For PDGFR-β^high^
Pdgfr_Gfap_High_Mdl1 <- mppm(Pdgfr_High ~ DPI/Gfap_Density, data = PointPatterns_Sub)

# We extract the coefficients
Pdgfr_Gfap_High_Coeff <- coef (Pdgfr_Gfap_High_Mdl1)
Pdgfr_Gfap_High_CI <- confint (Pdgfr_Gfap_High_Mdl1)

# For PDGFR-β^low^
Pdgfr_Gfap_Low_Mdl1 <- mppm(Pdgfr_Low ~ DPI/Gfap_Density, data = PointPatterns_Sub)

# We extract the coefficients
Pdgfr_Gfap_Low_Coeff <- coef (Pdgfr_Gfap_Low_Mdl1)
Pdgfr_Gfap_Low_CI <- confint (Pdgfr_Gfap_Low_Mdl1)
```

We check the summary for PDGFR-β^high^

```{r}
#| label: PPP_Pdgfrb_summary1
#| include: true
#| warning: false
#| message: false


summary(Pdgfr_Gfap_High_Mdl1)
```

The model shows (on the log scale) that the spatial intensity of For PDGFR-β^high^ increases at 7 (2.02) and 14 (2.48) DPI compared to 3 DPI, controlling for GFAP density.
The difference is smaller at 30 DPI (1.54). In addition, the interaction terms show a negative trend (-0.0014) in PDGFR-β^high^ spatial intensity for each unit increase in GFAP density at 3 DPI. This negative trend continues at 7 (-0.0018) and 14 (-0.00061) DPI until it is reversed at 30 DPI (0.0015). The data at 14 and 30 DPI show a progressive mixing of the cell populations.

```{r}
#| label: PPP_Pdgfrb_summary2
#| include: true
#| warning: false
#| message: false


summary(Pdgfr_Gfap_Low_Mdl1)
```

Otherwise, PDGFR-β^low^ display positive intercepts with a bigger uncertainty, suggesting a reduced spatial intensity for these cells and increasing allocation probability as the spatial intensity of GFAP increases.


# References

::: {#refs}
:::

