---
title-block-banner: true
title: "Analysis of PDGFR-α and PDGFR-β colocalization in the ipsilateral hemisphere"
subtitle: "Data analysis notebook"
date: today
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    affiliation: Univerisity Laval (Laboratory of neurovascular interactions) 
keywords: 
  - PDGFR-α
  - PDGFR-β
  - Brain injury
  - Bayesian modeling 
   
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false
    
csl: science.csl
bibliography: References.bib
---

# Preview

This notebook reports the analysis of PDGFR-α and PDGFR-β colocalization  in the ipsilateral hemisphere following cerebral ischemia.

**Parent dataset:** PDGFR-α and PDGFR-β stained ischemic hemispheres imaged at 10x (with stitching). Samples are grouped at 0 (Sham), 3, 7, 14, and 30 days post-ischemia (DPI). The raw images and pre-processing scripts (if applicable) are available at the Zenodo repository (10.5281/zenodo.10553084) under the name `Widefield_10x_Ipsilateral_Pdgfra-Pdgfrb.zip`.

**Working dataset**: The `Data_Processed/Widefield_10x_Ipsilateral_Pdgfra-Pdgfrb.csv`data frame contains the quantification of the co-stained area and the hemispheric ratio. The calculations were preformed manually in excel from measurements performed in FIJI. The script is available at https://osf.io/ue5nh.

# Install and load required packages

Install and load all required packages. Please uncomment (delete #) the line code if installation is required. Load the installed libraries each time you start a new R session.

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

#install.packages("devtools")
#library(devtools)

#install.packages(c("bayesplot", "bayestestR", "brms","dplyr", "easystats", "ggplot","modelbased", "modelr", "patchwork", "poorman","plyr", "spatstat", "tidybayes", "tidyverse", "viridis"))


library(bayesplot)
library(bayestestR)
library(brms)
library(dplyr)
library(easystats)
library(emmeans)
library(ggplot2)
library(modelbased)
library(modelr)
library(patchwork)
library(poorman)
library(plyr)
library(spatstat)
library(tidybayes)
library(tidyverse)
library(viridis)
```

# Visual themes

We create a visual theme to use in our plots (ggplots).

```{r}
#| label: Plot_Theme
#| include: true
#| warning: false
#| message: false
  
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# Load the data set

We load the dataset. In particular, we exclude brain with only striatal injuries to perform scientific inference for cortico-striatal lesions. 

```{r}
#| label: Pdgfra-Pdgfrb_Load 
#| include: true
#| warning: false
#| message: false
#| cache: true

Pdgfra_Raw <- read.csv(file = 'Data_Processed/Widefield_10x_Ipsilateral_Pdgfra_Pdgfrb_Coloc.csv', 
                                header = TRUE)

#We scale the required columns to obtain mm2.
Pdgfra_Raw $Area <- Pdgfra_Raw $Area /1000000
Pdgfra_Raw $Colocalization <- Pdgfra_Raw $Colocalization /100000

#We set DPI as numeric
Pdgfra_Raw$DPI <- as.numeric(Pdgfra_Raw$DPI)

# We exclude striatal (only) lesions
Pdgfra_Coloc <- Pdgfra_Raw[Pdgfra_Raw$Lesion != "L2",] 
```

# Exploratory data visualization

We perform the exploratory visualization for the dataset.

```{r}
#| label: fig-Pdgfra_Coloc_Exploratory
#| include: true
#| warning: false
#| message: false

set.seed(8807)

Pdgfra_Coloc_Sctr <- 
  ggplot(
    data  = Pdgfra_Coloc, 
    aes(x = DPI, 
        y = Colocalization)) +
geom_smooth(
  method = "lm", 
  se     = TRUE,
  color  = "black") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 2), 
  color   = "darkred") +
geom_smooth(
  method  = "lm", 
  se      = TRUE, 
  formula = y ~ poly(x, 3), 
  color   = "darkgreen") +
geom_jitter(
  width = 0.5, 
  shape = 1, 
  size  = 1.5, 
  color = "black") +
  scale_y_continuous(name= expression("PDGFR-β/PDGFR-α coloc. (mm)"^2)) +
  scale_x_continuous(name="DPI",
                     breaks=c(0, 3, 7,14,30)) +
  Plot_theme

Pdgfra_Coloc_Sctr
```
The graphs reveal an upsurge in the colocalization of the two markers from 7 DPI, which is better captured by a non-liner model. 

# Statistical modeling

We model the colocalization area between PDGFR-α and PDGFR-β using a splines models as done previously for PDGFR-β reactivity.

```{r}
#| label: Pdgfra_Coloc_Modeling
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Model 1: DPI as a predictor
Pdgfra_Coloc_Mdl1 <- bf(Colocalization ~ s(DPI, k=5),
                        sigma ~  s(DPI, k=5))

get_prior(Pdgfra_Coloc_Mdl1, Pdgfra_Coloc)

# Fit model 1
Pdgfra_Coloc_Fit1 <- 
  brm(
    data    = Pdgfra_Pdgfra_Coloc,
    family  = student, 
    formula = Pdgfra_Coloc_Mdl1,
    knots   = list(DPI = c(0, 3, 7, 14, 30)),
    chains  = 4,
    cores   = 4,
    warmup  = 2500, 
    iter    = 5000, 
    seed    = 8807,
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    file    = "Models/Pdgfra_Pdgfrb_Coloc/Pdgfra_coloc_Fit1.rds",
    file_refit = "never") 
                     
# Add loo for model comparison
Pdgfra_Coloc_Fit1 <- 
  add_criterion(Pdgfra_Coloc_Fit1, c("loo", "waic", "bayes_R2"))

```
# Model diagnostics

We check the model fitting using posterior predictive checks

```{r}
#| label: Pdgfra_Coloc_Diagnostics
#| include: true
#| warning: false
#| message: false
#| cache: true
 
set.seed(8807)

Pdgfra_Coloc_Fit1_pp <- 
  brms::pp_check(Pdgfra_Coloc_Fit1, 
                 ndraws = 100) +
  labs(title = "Posterior predictive checks",
  subtitle = "Formula: Formula: Colocalization ~ s(DPI, k = 5), sigma ~  s(DPI, k=5)") +
  Plot_theme  
  
Pdgfra_Coloc_Fit1_pp
```

There are no significant deviations from the data. We can explore further the model using `shinystan`.

```{r}
#| label: Pdgfra_Coloc_Shiny
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

#launch_shinystan(Pdgfra_Coloc_Fit1)
```

# Model results

## Visualization of conditional effects

```{r}
#| label: fig-Pdgfra_Coloc_CE 
#| include: true
#| warning: false
#| message: false

set.seed(8807)

# We convert the estimates to a data frame
Pdgfra_Coloc_DPI <- 
  conditional_effects(Pdgfra_Coloc_Fit1)

Pdgfra_Coloc_DPIdf <- 
  as.data.frame(Pdgfra_Coloc_DPI$DPI)

Pdgfra_Coloc_pred <- 
  Pdgfra_Coloc %>%
  data_grid(DPI, n = 10) %>%
  add_predicted_draws(
    Pdgfra_Coloc_Fit1, 
    ndraws = 50)

Pdgfra_Coloc_Fig <-  
  ggplot(
    data  = Pdgfra_Coloc_DPIdf,
    aes(x = DPI,
        y = estimate__)
    )+
   geom_jitter(
    data  = Pdgfra_Coloc, 
    aes(x = DPI, y=Colocalization),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  geom_ribbon(
    aes(ymin  = lower__, 
        ymax  = upper__),
        alpha = 0.2)+
  geom_line(
    size     = 1,
    position = position_dodge(0.05), 
    color    = "blue") +
  
  scale_y_continuous(name= expression("PDGFR-β/PDGFR-α (mm)"^2),
                     limits = c(0, 18)) +
  scale_x_continuous(name="DPI") +
  Plot_theme 
 
  ggsave(
  plot     = Pdgfra_Coloc_Fig, 
  filename = "Plots/Widefield_10x_Pdgfra-Pdgfrb_Coloc/Pdgfra_Coloc_Fig.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

  
# Plot smooths for sigma

Pdgfra_Coloc_Smooths <- 
  conditional_smooths(Pdgfra_Coloc_Fit1)

Pdgfra_Coloc_Sigma_df <- 
  as.data.frame(Pdgfra_Coloc_Smooths$`sigma: s(DPI,k=5)`)

Pdgfra_Coloc_Sigma_fig <-  
  ggplot(Pdgfra_Coloc_Sigma_df,
         aes(x = DPI,y = estimate__))+
  geom_ribbon(
    aes(ymin  =lower__, 
        ymax = upper__), 
    alpha = 0.2)+
  geom_line(size  = 1,
            color ="blue",
            position = position_dodge(0.05)) +
  scale_y_continuous(name= expression("PDGFR-β/PDGFR-α (log)"[sigma])) +
  scale_x_continuous(name="DPI") +
  Plot_theme
          
ggsave(plot     = Pdgfra_Coloc_Sigma_fig, 
       filename = "Plots/Widefield_10x_Pdgfra-Pdgfrb_Coloc/Pdgfra_Coloc_Sigma.png", 
       width    = 9, 
       height   = 9, 
       units    = "cm")

Pdgfra_Coloc_Fig | Pdgfra_Coloc_Sigma_fig
```
@fig-Pdgfra_Coloc_CE shows an increasing trend in the colocalization of PDGFR-β/PDGFR-α. This trend is similar to the observed for PDGFR-β in this research. This hints that PDGFR-β reactivity is closely associated with PDGFR-α expression exclusively after injury, given that both markers do not colocalize in the healthy brain.

## Posterior summary

Next, we plot the posterior summary using the `describe_posterior` function:

```{r}
#| label: tbl-Pdgfra_Coloc_Posterior
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

describe_posterior(
  Pdgfra_Coloc_Fit1,
  effects = "all",
  test = c("p_direction", "rope"),
  component = "all",
  centrality = "median")
```

## Estimate derivative

We estimate the derivative to separate positive from negative trends in the fitted curve and obtain more clear linear fits. In statistical modeling, derivatives provide a measure of how a predictor variable influences the response variable, offering a more nuanced interpretation beyond the sign and magnitude of parameter estimates.

In mathematical terms, the derivative of a smooth function $f(x)$ is defined as:

$$ 
f'(x) = \lim\_{{\Delta x \to 0}} \frac{f(x + \Delta x) - f(x)}{\Delta x} 
$$ {#eq-derivative}

For a Bayesian model where $y = f(x)$, the derivative $\frac{dy}{dx}$ or $f'(x)$ represents the rate of change in the response variable $y$ for a unit change in the predictor variable $x$. If the model is non-linear, this derivative is a function of $x$ itself, allowing us to visualize how this rate of change varies across different values of $x$.

First, we estimate point-to point derivatives:

```{r}
#| label: Pdgfra_Relation
#| include: true
#| warning: false
#| message: false

Pdgfra_Coloc_est <- 
  estimate_relation(
    Pdgfra_Coloc_Fit1, 
    at = "DPI", 
    ci = c(0.95))

Pdgfra_Coloc_est

estimate_smooth(Pdgfra_Coloc_est, x = "DPI")
```
@Pdgfra_Relation predicts a sustained increase (slope = 0.67) for the markers colocalization up to \~ 16 DPI (Change of 11). This is followed by a slightly decrease in slope (-0.23) up to 30 DPI.

## Visualize derivatives

We can plot the derivative:

```{r}
#| label: fig-Pdgfra_Slopes
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Pdgfra_Coloc_deriv <- 
  estimate_slopes(
    Pdgfra_Coloc_Fit1,
    trend = "DPI",
     at = "DPI",
    length = 30
    )

# Visualize
Pdgfra_Coloc_deriv_Fig <- 
  plot(Pdgfra_Coloc_deriv) + 
  labs(x = "DPI", 
       y = "Effect of DPI",
       title = NULL
       ) +
  Plot_theme +
  theme(legend.position= "none")

ggsave(
  plot     = Pdgfra_Coloc_deriv_Fig, 
  filename = "Plots/Widefield_10x_Pdgfra-Pdgfrb_Coloc/Pdgfra_Coloc_deriv.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

Pdgfra_Coloc_deriv_Fig 
```

# References

::: {#refs}
:::


